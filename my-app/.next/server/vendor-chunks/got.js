"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/got";
exports.ids = ["vendor-chunks/got"];
exports.modules = {

/***/ "(ssr)/./node_modules/got/index.js":
/*!***********************************!*\
  !*** ./node_modules/got/index.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nvar http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nvar urlLib = __webpack_require__(/*! url */ \"url\");\nvar querystring = __webpack_require__(/*! querystring */ \"querystring\");\nvar objectAssign = __webpack_require__(/*! object-assign */ \"(ssr)/./node_modules/object-assign/index.js\");\nvar PassThrough = (__webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\").PassThrough);\nvar duplexer2 = __webpack_require__(/*! duplexer2 */ \"(ssr)/./node_modules/duplexer2/index.js\");\nvar isStream = __webpack_require__(/*! is-stream */ \"(ssr)/./node_modules/is-stream/index.js\");\nvar readAllStream = __webpack_require__(/*! read-all-stream */ \"(ssr)/./node_modules/read-all-stream/index.js\");\nvar timedOut = __webpack_require__(/*! timed-out */ \"(ssr)/./node_modules/timed-out/index.js\");\nvar urlParseLax = __webpack_require__(/*! url-parse-lax */ \"(ssr)/./node_modules/url-parse-lax/index.js\");\nvar lowercaseKeys = __webpack_require__(/*! lowercase-keys */ \"(ssr)/./node_modules/lowercase-keys/index.js\");\nvar isRedirect = __webpack_require__(/*! is-redirect */ \"(ssr)/./node_modules/is-redirect/index.js\");\nvar PinkiePromise = __webpack_require__(/*! pinkie-promise */ \"(ssr)/./node_modules/pinkie-promise/index.js\");\nvar unzipResponse = __webpack_require__(/*! unzip-response */ \"(ssr)/./node_modules/unzip-response/index.js\");\nvar createErrorClass = __webpack_require__(/*! create-error-class */ \"(ssr)/./node_modules/create-error-class/index.js\");\nvar nodeStatusCodes = __webpack_require__(/*! node-status-codes */ \"(ssr)/./node_modules/node-status-codes/index.js\");\nvar parseJson = __webpack_require__(/*! parse-json */ \"(ssr)/./node_modules/parse-json/index.js\");\nvar isRetryAllowed = __webpack_require__(/*! is-retry-allowed */ \"(ssr)/./node_modules/is-retry-allowed/index.js\");\nvar pkg = __webpack_require__(/*! ./package.json */ \"(ssr)/./node_modules/got/package.json\");\nfunction requestAsEventEmitter(opts) {\n    opts = opts || {};\n    var ee = new EventEmitter();\n    var requestUrl = opts.href || urlLib.resolve(urlLib.format(opts), opts.path);\n    var redirectCount = 0;\n    var retryCount = 0;\n    var redirectUrl;\n    var get = function(opts) {\n        var fn = opts.protocol === \"https:\" ? https : http;\n        var req = fn.request(opts, function(res) {\n            var statusCode = res.statusCode;\n            if (isRedirect(statusCode) && opts.followRedirect && \"location\" in res.headers && (opts.method === \"GET\" || opts.method === \"HEAD\")) {\n                res.resume();\n                if (++redirectCount > 10) {\n                    ee.emit(\"error\", new got.MaxRedirectsError(statusCode, opts), null, res);\n                    return;\n                }\n                redirectUrl = urlLib.resolve(urlLib.format(opts), res.headers.location);\n                var redirectOpts = objectAssign({}, opts, urlLib.parse(redirectUrl));\n                ee.emit(\"redirect\", res, redirectOpts);\n                get(redirectOpts);\n                return;\n            }\n            // do not write ee.bind(...) instead of function - it will break gzip in Node.js 0.10\n            setImmediate(function() {\n                var response = typeof unzipResponse === \"function\" && req.method !== \"HEAD\" ? unzipResponse(res) : res;\n                response.url = redirectUrl || requestUrl;\n                response.requestUrl = requestUrl;\n                ee.emit(\"response\", response);\n            });\n        });\n        req.once(\"error\", function(err) {\n            var backoff = opts.retries(++retryCount, err);\n            if (backoff) {\n                setTimeout(get, backoff, opts);\n                return;\n            }\n            ee.emit(\"error\", new got.RequestError(err, opts));\n        });\n        if (opts.timeout) {\n            timedOut(req, opts.timeout);\n        }\n        setImmediate(ee.emit.bind(ee), \"request\", req);\n    };\n    get(opts);\n    return ee;\n}\nfunction asCallback(opts, cb) {\n    var ee = requestAsEventEmitter(opts);\n    ee.on(\"request\", function(req) {\n        if (isStream(opts.body)) {\n            opts.body.pipe(req);\n            opts.body = undefined;\n            return;\n        }\n        req.end(opts.body);\n    });\n    ee.on(\"response\", function(res) {\n        readAllStream(res, opts.encoding, function(error, data) {\n            var statusCode = res.statusCode;\n            var limitStatusCode = opts.followRedirect ? 299 : 399;\n            if (error) {\n                cb(new got.ReadError(error, opts), null, res);\n                return;\n            }\n            if (statusCode < 200 || statusCode > limitStatusCode) {\n                error = new got.HTTPError(statusCode, opts);\n            }\n            if (opts.json && data) {\n                try {\n                    data = parseJson(data);\n                } catch (err) {\n                    err.fileName = urlLib.format(opts);\n                    error = new got.ParseError(err, statusCode, opts);\n                }\n            }\n            cb(error, data, res);\n        });\n    });\n    ee.on(\"error\", cb);\n}\nfunction asPromise(opts) {\n    return new PinkiePromise(function(resolve, reject) {\n        asCallback(opts, function(err, data, response) {\n            if (response) {\n                response.body = data;\n            }\n            if (err) {\n                Object.defineProperty(err, \"response\", {\n                    value: response,\n                    enumerable: false\n                });\n                reject(err);\n                return;\n            }\n            resolve(response);\n        });\n    });\n}\nfunction asStream(opts) {\n    var input = new PassThrough();\n    var output = new PassThrough();\n    var proxy = duplexer2(input, output);\n    if (opts.json) {\n        throw new Error(\"got can not be used as stream when options.json is used\");\n    }\n    if (opts.body) {\n        proxy.write = function() {\n            throw new Error(\"got's stream is not writable when options.body is used\");\n        };\n    }\n    var ee = requestAsEventEmitter(opts);\n    ee.on(\"request\", function(req) {\n        proxy.emit(\"request\", req);\n        if (isStream(opts.body)) {\n            opts.body.pipe(req);\n            return;\n        }\n        if (opts.body) {\n            req.end(opts.body);\n            return;\n        }\n        if (opts.method === \"POST\" || opts.method === \"PUT\" || opts.method === \"PATCH\") {\n            input.pipe(req);\n            return;\n        }\n        req.end();\n    });\n    ee.on(\"response\", function(res) {\n        var statusCode = res.statusCode;\n        var limitStatusCode = opts.followRedirect ? 299 : 399;\n        res.pipe(output);\n        if (statusCode < 200 || statusCode > limitStatusCode) {\n            proxy.emit(\"error\", new got.HTTPError(statusCode, opts), null, res);\n            return;\n        }\n        proxy.emit(\"response\", res);\n    });\n    ee.on(\"redirect\", proxy.emit.bind(proxy, \"redirect\"));\n    ee.on(\"error\", proxy.emit.bind(proxy, \"error\"));\n    return proxy;\n}\nfunction normalizeArguments(url, opts) {\n    if (typeof url !== \"string\" && typeof url !== \"object\") {\n        throw new Error(\"Parameter `url` must be a string or object, not \" + typeof url);\n    }\n    if (typeof url === \"string\") {\n        url = url.replace(/^unix:/, \"http://$&\");\n        url = urlParseLax(url);\n        if (url.auth) {\n            throw new Error(\"Basic authentication must be done with auth option\");\n        }\n    }\n    opts = objectAssign({\n        protocol: \"http:\",\n        path: \"\",\n        retries: 5\n    }, url, opts);\n    opts.headers = objectAssign({\n        \"user-agent\": pkg.name + \"/\" + pkg.version + \" (https://github.com/sindresorhus/got)\",\n        \"accept-encoding\": \"gzip,deflate\"\n    }, lowercaseKeys(opts.headers));\n    var query = opts.query;\n    if (query) {\n        if (typeof query !== \"string\") {\n            opts.query = querystring.stringify(query);\n        }\n        opts.path = opts.path.split(\"?\")[0] + \"?\" + opts.query;\n        delete opts.query;\n    }\n    if (opts.json && opts.headers.accept === undefined) {\n        opts.headers.accept = \"application/json\";\n    }\n    var body = opts.body;\n    if (body) {\n        if (typeof body !== \"string\" && !(body !== null && typeof body === \"object\")) {\n            throw new Error(\"options.body must be a ReadableStream, string, Buffer or plain Object\");\n        }\n        opts.method = opts.method || \"POST\";\n        if (isStream(body) && typeof body.getBoundary === \"function\") {\n            // Special case for https://github.com/form-data/form-data\n            opts.headers[\"content-type\"] = opts.headers[\"content-type\"] || \"multipart/form-data; boundary=\" + body.getBoundary();\n        } else if (body !== null && typeof body === \"object\" && !Buffer.isBuffer(body) && !isStream(body)) {\n            opts.headers[\"content-type\"] = opts.headers[\"content-type\"] || \"application/x-www-form-urlencoded\";\n            body = opts.body = querystring.stringify(body);\n        }\n        if (opts.headers[\"content-length\"] === undefined && opts.headers[\"transfer-encoding\"] === undefined && !isStream(body)) {\n            var length = typeof body === \"string\" ? Buffer.byteLength(body) : body.length;\n            opts.headers[\"content-length\"] = length;\n        }\n    }\n    opts.method = opts.method || \"GET\";\n    opts.method = opts.method.toUpperCase();\n    if (opts.hostname === \"unix\") {\n        var matches = /(.+):(.+)/.exec(opts.path);\n        if (matches) {\n            opts.socketPath = matches[1];\n            opts.path = matches[2];\n            opts.host = null;\n        }\n    }\n    if (typeof opts.retries !== \"function\") {\n        var retries = opts.retries;\n        opts.retries = function backoff(iter, err) {\n            if (iter > retries || !isRetryAllowed(err)) {\n                return 0;\n            }\n            var noise = Math.random() * 100;\n            return (1 << iter) * 1000 + noise;\n        };\n    }\n    if (opts.followRedirect === undefined) {\n        opts.followRedirect = true;\n    }\n    return opts;\n}\nfunction got(url, opts, cb) {\n    if (typeof opts === \"function\") {\n        cb = opts;\n        opts = {};\n    }\n    if (cb) {\n        asCallback(normalizeArguments(url, opts), cb);\n        return null;\n    }\n    try {\n        return asPromise(normalizeArguments(url, opts));\n    } catch (err) {\n        return PinkiePromise.reject(err);\n    }\n}\nvar helpers = [\n    \"get\",\n    \"post\",\n    \"put\",\n    \"patch\",\n    \"head\",\n    \"delete\"\n];\nhelpers.forEach(function(el) {\n    got[el] = function(url, opts, cb) {\n        if (typeof opts === \"function\") {\n            cb = opts;\n            opts = {};\n        }\n        return got(url, objectAssign({}, opts, {\n            method: el\n        }), cb);\n    };\n});\ngot.stream = function(url, opts, cb) {\n    if (cb || typeof opts === \"function\") {\n        throw new Error(\"callback can not be used with stream mode\");\n    }\n    return asStream(normalizeArguments(url, opts));\n};\nhelpers.forEach(function(el) {\n    got.stream[el] = function(url, opts, cb) {\n        if (typeof opts === \"function\") {\n            cb = opts;\n            opts = {};\n        }\n        return got.stream(url, objectAssign({}, opts, {\n            method: el\n        }), cb);\n    };\n});\nfunction stdError(error, opts) {\n    if (error.code !== undefined) {\n        this.code = error.code;\n    }\n    objectAssign(this, {\n        message: error.message,\n        host: opts.host,\n        hostname: opts.hostname,\n        method: opts.method,\n        path: opts.path\n    });\n}\ngot.RequestError = createErrorClass(\"RequestError\", stdError);\ngot.ReadError = createErrorClass(\"ReadError\", stdError);\ngot.ParseError = createErrorClass(\"ParseError\", function(e, statusCode, opts) {\n    stdError.call(this, e, opts);\n    this.statusCode = statusCode;\n    this.statusMessage = nodeStatusCodes[this.statusCode];\n});\ngot.HTTPError = createErrorClass(\"HTTPError\", function(statusCode, opts) {\n    stdError.call(this, {}, opts);\n    this.statusCode = statusCode;\n    this.statusMessage = nodeStatusCodes[this.statusCode];\n    this.message = \"Response code \" + this.statusCode + \" (\" + this.statusMessage + \")\";\n});\ngot.MaxRedirectsError = createErrorClass(\"MaxRedirectsError\", function(statusCode, opts) {\n    stdError.call(this, {}, opts);\n    this.statusCode = statusCode;\n    this.statusMessage = nodeStatusCodes[this.statusCode];\n    this.message = \"Redirected 10 times. Aborting.\";\n});\nmodule.exports = got;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/got/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/got/package.json":
/*!***************************************!*\
  !*** ./node_modules/got/package.json ***!
  \***************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"got","version":"5.7.1","description":"Simplified HTTP/HTTPS requests","license":"MIT","repository":"sindresorhus/got","maintainers":[{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},{"name":"Vsevolod Strukchinsky","email":"floatdrop@gmail.com","url":"github.com/floatdrop"}],"engines":{"node":">=0.10.0 <7"},"browser":{"unzip-response":false},"scripts":{"test":"xo && nyc ava","coveralls":"nyc report --reporter=text-lcov | coveralls"},"files":["index.js"],"keywords":["http","https","get","got","url","uri","request","util","utility","simple","curl","wget","fetch"],"dependencies":{"create-error-class":"^3.0.1","duplexer2":"^0.1.4","is-redirect":"^1.0.0","is-retry-allowed":"^1.0.0","is-stream":"^1.0.0","lowercase-keys":"^1.0.0","node-status-codes":"^1.0.0","object-assign":"^4.0.1","parse-json":"^2.1.0","pinkie-promise":"^2.0.0","read-all-stream":"^3.0.0","readable-stream":"^2.0.5","timed-out":"^3.0.0","unzip-response":"^1.0.2","url-parse-lax":"^1.0.0"},"devDependencies":{"ava":"^0.16.0","coveralls":"^2.11.4","form-data":"^2.1.1","get-port":"^2.0.0","get-stream":"^2.3.0","into-stream":"^2.0.0","nyc":"^8.1.0","pem":"^1.4.4","pify":"^2.3.0","tempfile":"^1.1.1","xo":"0.16.x"},"xo":{"ignores":["test/**"]}}');

/***/ })

};
;