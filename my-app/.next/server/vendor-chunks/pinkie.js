"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pinkie";
exports.ids = ["vendor-chunks/pinkie"];
exports.modules = {

/***/ "(ssr)/./node_modules/pinkie/index.js":
/*!**************************************!*\
  !*** ./node_modules/pinkie/index.js ***!
  \**************************************/
/***/ ((module) => {

eval("\nvar PENDING = \"pending\";\nvar SETTLED = \"settled\";\nvar FULFILLED = \"fulfilled\";\nvar REJECTED = \"rejected\";\nvar NOOP = function() {};\nvar isNode = typeof global !== \"undefined\" && typeof global.process !== \"undefined\" && typeof global.process.emit === \"function\";\nvar asyncSetTimer = typeof setImmediate === \"undefined\" ? setTimeout : setImmediate;\nvar asyncQueue = [];\nvar asyncTimer;\nfunction asyncFlush() {\n    // run promise callbacks\n    for(var i = 0; i < asyncQueue.length; i++){\n        asyncQueue[i][0](asyncQueue[i][1]);\n    }\n    // reset async asyncQueue\n    asyncQueue = [];\n    asyncTimer = false;\n}\nfunction asyncCall(callback, arg) {\n    asyncQueue.push([\n        callback,\n        arg\n    ]);\n    if (!asyncTimer) {\n        asyncTimer = true;\n        asyncSetTimer(asyncFlush, 0);\n    }\n}\nfunction invokeResolver(resolver, promise) {\n    function resolvePromise(value) {\n        resolve(promise, value);\n    }\n    function rejectPromise(reason) {\n        reject(promise, reason);\n    }\n    try {\n        resolver(resolvePromise, rejectPromise);\n    } catch (e) {\n        rejectPromise(e);\n    }\n}\nfunction invokeCallback(subscriber) {\n    var owner = subscriber.owner;\n    var settled = owner._state;\n    var value = owner._data;\n    var callback = subscriber[settled];\n    var promise = subscriber.then;\n    if (typeof callback === \"function\") {\n        settled = FULFILLED;\n        try {\n            value = callback(value);\n        } catch (e) {\n            reject(promise, e);\n        }\n    }\n    if (!handleThenable(promise, value)) {\n        if (settled === FULFILLED) {\n            resolve(promise, value);\n        }\n        if (settled === REJECTED) {\n            reject(promise, value);\n        }\n    }\n}\nfunction handleThenable(promise, value) {\n    var resolved;\n    try {\n        if (promise === value) {\n            throw new TypeError(\"A promises callback cannot return that same promise.\");\n        }\n        if (value && (typeof value === \"function\" || typeof value === \"object\")) {\n            // then should be retrieved only once\n            var then = value.then;\n            if (typeof then === \"function\") {\n                then.call(value, function(val) {\n                    if (!resolved) {\n                        resolved = true;\n                        if (value === val) {\n                            fulfill(promise, val);\n                        } else {\n                            resolve(promise, val);\n                        }\n                    }\n                }, function(reason) {\n                    if (!resolved) {\n                        resolved = true;\n                        reject(promise, reason);\n                    }\n                });\n                return true;\n            }\n        }\n    } catch (e) {\n        if (!resolved) {\n            reject(promise, e);\n        }\n        return true;\n    }\n    return false;\n}\nfunction resolve(promise, value) {\n    if (promise === value || !handleThenable(promise, value)) {\n        fulfill(promise, value);\n    }\n}\nfunction fulfill(promise, value) {\n    if (promise._state === PENDING) {\n        promise._state = SETTLED;\n        promise._data = value;\n        asyncCall(publishFulfillment, promise);\n    }\n}\nfunction reject(promise, reason) {\n    if (promise._state === PENDING) {\n        promise._state = SETTLED;\n        promise._data = reason;\n        asyncCall(publishRejection, promise);\n    }\n}\nfunction publish(promise) {\n    promise._then = promise._then.forEach(invokeCallback);\n}\nfunction publishFulfillment(promise) {\n    promise._state = FULFILLED;\n    publish(promise);\n}\nfunction publishRejection(promise) {\n    promise._state = REJECTED;\n    publish(promise);\n    if (!promise._handled && isNode) {\n        global.process.emit(\"unhandledRejection\", promise._data, promise);\n    }\n}\nfunction notifyRejectionHandled(promise) {\n    global.process.emit(\"rejectionHandled\", promise);\n}\n/**\n * @class\n */ function Promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"Promise resolver \" + resolver + \" is not a function\");\n    }\n    if (this instanceof Promise === false) {\n        throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n    this._then = [];\n    invokeResolver(resolver, this);\n}\nPromise.prototype = {\n    constructor: Promise,\n    _state: PENDING,\n    _then: null,\n    _data: undefined,\n    _handled: false,\n    then: function(onFulfillment, onRejection) {\n        var subscriber = {\n            owner: this,\n            then: new this.constructor(NOOP),\n            fulfilled: onFulfillment,\n            rejected: onRejection\n        };\n        if ((onRejection || onFulfillment) && !this._handled) {\n            this._handled = true;\n            if (this._state === REJECTED && isNode) {\n                asyncCall(notifyRejectionHandled, this);\n            }\n        }\n        if (this._state === FULFILLED || this._state === REJECTED) {\n            // already resolved, call callback async\n            asyncCall(invokeCallback, subscriber);\n        } else {\n            // subscribe\n            this._then.push(subscriber);\n        }\n        return subscriber.then;\n    },\n    catch: function(onRejection) {\n        return this.then(null, onRejection);\n    }\n};\nPromise.all = function(promises) {\n    if (!Array.isArray(promises)) {\n        throw new TypeError(\"You must pass an array to Promise.all().\");\n    }\n    return new Promise(function(resolve, reject) {\n        var results = [];\n        var remaining = 0;\n        function resolver(index) {\n            remaining++;\n            return function(value) {\n                results[index] = value;\n                if (!--remaining) {\n                    resolve(results);\n                }\n            };\n        }\n        for(var i = 0, promise; i < promises.length; i++){\n            promise = promises[i];\n            if (promise && typeof promise.then === \"function\") {\n                promise.then(resolver(i), reject);\n            } else {\n                results[i] = promise;\n            }\n        }\n        if (!remaining) {\n            resolve(results);\n        }\n    });\n};\nPromise.race = function(promises) {\n    if (!Array.isArray(promises)) {\n        throw new TypeError(\"You must pass an array to Promise.race().\");\n    }\n    return new Promise(function(resolve, reject) {\n        for(var i = 0, promise; i < promises.length; i++){\n            promise = promises[i];\n            if (promise && typeof promise.then === \"function\") {\n                promise.then(resolve, reject);\n            } else {\n                resolve(promise);\n            }\n        }\n    });\n};\nPromise.resolve = function(value) {\n    if (value && typeof value === \"object\" && value.constructor === Promise) {\n        return value;\n    }\n    return new Promise(function(resolve) {\n        resolve(value);\n    });\n};\nPromise.reject = function(reason) {\n    return new Promise(function(resolve, reject) {\n        reject(reason);\n    });\n};\nmodule.exports = Promise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pinkie/index.js\n");

/***/ })

};
;