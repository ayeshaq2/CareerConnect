/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/asn1";
exports.ids = ["vendor-chunks/asn1"];
exports.modules = {

/***/ "(ssr)/./node_modules/asn1/lib/ber/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/errors.js ***!
  \*********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nmodule.exports = {\n    newInvalidAsn1Error: function(msg) {\n        var e = new Error();\n        e.name = \"InvalidAsn1Error\";\n        e.message = msg || \"\";\n        return e;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2Vycm9ycy5qcz8zMzNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBuZXdJbnZhbGlkQXNuMUVycm9yOiBmdW5jdGlvbiAobXNnKSB7XG4gICAgdmFyIGUgPSBuZXcgRXJyb3IoKTtcbiAgICBlLm5hbWUgPSAnSW52YWxpZEFzbjFFcnJvcic7XG4gICAgZS5tZXNzYWdlID0gbXNnIHx8ICcnO1xuICAgIHJldHVybiBlO1xuICB9XG5cbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm5ld0ludmFsaWRBc24xRXJyb3IiLCJtc2ciLCJlIiwiRXJyb3IiLCJuYW1lIiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6IkFBQUEsc0VBQXNFO0FBR3RFQSxPQUFPQyxPQUFPLEdBQUc7SUFFZkMscUJBQXFCLFNBQVVDLEdBQUc7UUFDaEMsSUFBSUMsSUFBSSxJQUFJQztRQUNaRCxFQUFFRSxJQUFJLEdBQUc7UUFDVEYsRUFBRUcsT0FBTyxHQUFHSixPQUFPO1FBQ25CLE9BQU9DO0lBQ1Q7QUFFRiIsImZpbGUiOiIoc3NyKS8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvZXJyb3JzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/ber/index.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/asn1/lib/ber/errors.js\");\nvar types = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/asn1/lib/ber/types.js\");\nvar Reader = __webpack_require__(/*! ./reader */ \"(ssr)/./node_modules/asn1/lib/ber/reader.js\");\nvar Writer = __webpack_require__(/*! ./writer */ \"(ssr)/./node_modules/asn1/lib/ber/writer.js\");\n// --- Exports\nmodule.exports = {\n    Reader: Reader,\n    Writer: Writer\n};\nfor(var t in types){\n    if (types.hasOwnProperty(t)) module.exports[t] = types[t];\n}\nfor(var e in errors){\n    if (errors.hasOwnProperty(e)) module.exports[e] = errors[e];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHNFQUFzRTtBQUV0RSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUVwQixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUNyQixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQztBQUdyQixjQUFjO0FBRWRJLE9BQU9DLE9BQU8sR0FBRztJQUVmSCxRQUFRQTtJQUVSQyxRQUFRQTtBQUVWO0FBRUEsSUFBSyxJQUFJRyxLQUFLTCxNQUFPO0lBQ25CLElBQUlBLE1BQU1NLGNBQWMsQ0FBQ0QsSUFDdkJGLE9BQU9DLE9BQU8sQ0FBQ0MsRUFBRSxHQUFHTCxLQUFLLENBQUNLLEVBQUU7QUFDaEM7QUFDQSxJQUFLLElBQUlFLEtBQUtULE9BQVE7SUFDcEIsSUFBSUEsT0FBT1EsY0FBYyxDQUFDQyxJQUN4QkosT0FBT0MsT0FBTyxDQUFDRyxFQUFFLEdBQUdULE1BQU0sQ0FBQ1MsRUFBRTtBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9iZXIvaW5kZXguanM/OTdjNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbnZhciBlcnJvcnMgPSByZXF1aXJlKCcuL2Vycm9ycycpO1xudmFyIHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuXG52YXIgUmVhZGVyID0gcmVxdWlyZSgnLi9yZWFkZXInKTtcbnZhciBXcml0ZXIgPSByZXF1aXJlKCcuL3dyaXRlcicpO1xuXG5cbi8vIC0tLSBFeHBvcnRzXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIFJlYWRlcjogUmVhZGVyLFxuXG4gIFdyaXRlcjogV3JpdGVyXG5cbn07XG5cbmZvciAodmFyIHQgaW4gdHlwZXMpIHtcbiAgaWYgKHR5cGVzLmhhc093blByb3BlcnR5KHQpKVxuICAgIG1vZHVsZS5leHBvcnRzW3RdID0gdHlwZXNbdF07XG59XG5mb3IgKHZhciBlIGluIGVycm9ycykge1xuICBpZiAoZXJyb3JzLmhhc093blByb3BlcnR5KGUpKVxuICAgIG1vZHVsZS5leHBvcnRzW2VdID0gZXJyb3JzW2VdO1xufVxuIl0sIm5hbWVzIjpbImVycm9ycyIsInJlcXVpcmUiLCJ0eXBlcyIsIlJlYWRlciIsIldyaXRlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0IiwiaGFzT3duUHJvcGVydHkiLCJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/ber/reader.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/reader.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\n// --- API\nfunction Reader(data) {\n    if (!data || !Buffer.isBuffer(data)) throw new TypeError(\"data must be a node Buffer\");\n    this._buf = data;\n    this._size = data.length;\n    // These hold the \"current\" state\n    this._len = 0;\n    this._offset = 0;\n}\nObject.defineProperty(Reader.prototype, \"length\", {\n    enumerable: true,\n    get: function() {\n        return this._len;\n    }\n});\nObject.defineProperty(Reader.prototype, \"offset\", {\n    enumerable: true,\n    get: function() {\n        return this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"remain\", {\n    get: function() {\n        return this._size - this._offset;\n    }\n});\nObject.defineProperty(Reader.prototype, \"buffer\", {\n    get: function() {\n        return this._buf.slice(this._offset);\n    }\n});\n/**\n * Reads a single byte and advances offset; you can pass in `true` to make this\n * a \"peek\" operation (i.e., get the byte, but don't advance the offset).\n *\n * @param {Boolean} peek true means don't move offset.\n * @return {Number} the next byte, null if not enough data.\n */ Reader.prototype.readByte = function(peek) {\n    if (this._size - this._offset < 1) return null;\n    var b = this._buf[this._offset] & 0xff;\n    if (!peek) this._offset += 1;\n    return b;\n};\nReader.prototype.peek = function() {\n    return this.readByte(true);\n};\n/**\n * Reads a (potentially) variable length off the BER buffer.  This call is\n * not really meant to be called directly, as callers have to manipulate\n * the internal buffer afterwards.\n *\n * As a result of this call, you can call `Reader.length`, until the\n * next thing called that does a readLength.\n *\n * @return {Number} the amount of offset to advance the buffer.\n * @throws {InvalidAsn1Error} on bad ASN.1\n */ Reader.prototype.readLength = function(offset) {\n    if (offset === undefined) offset = this._offset;\n    if (offset >= this._size) return null;\n    var lenB = this._buf[offset++] & 0xff;\n    if (lenB === null) return null;\n    if ((lenB & 0x80) === 0x80) {\n        lenB &= 0x7f;\n        if (lenB === 0) throw newInvalidAsn1Error(\"Indefinite length not supported\");\n        if (lenB > 4) throw newInvalidAsn1Error(\"encoding too long\");\n        if (this._size - offset < lenB) return null;\n        this._len = 0;\n        for(var i = 0; i < lenB; i++)this._len = (this._len << 8) + (this._buf[offset++] & 0xff);\n    } else {\n        // Wasn't a variable length\n        this._len = lenB;\n    }\n    return offset;\n};\n/**\n * Parses the next sequence in this BER buffer.\n *\n * To get the length of the sequence, call `Reader.length`.\n *\n * @return {Number} the sequence's tag.\n */ Reader.prototype.readSequence = function(tag) {\n    var seq = this.peek();\n    if (seq === null) return null;\n    if (tag !== undefined && tag !== seq) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + seq.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    this._offset = o;\n    return seq;\n};\nReader.prototype.readInt = function() {\n    return this._readTag(ASN1.Integer);\n};\nReader.prototype.readBoolean = function() {\n    return this._readTag(ASN1.Boolean) === 0 ? false : true;\n};\nReader.prototype.readEnumeration = function() {\n    return this._readTag(ASN1.Enumeration);\n};\nReader.prototype.readString = function(tag, retbuf) {\n    if (!tag) tag = ASN1.OctetString;\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    if (this.length === 0) return retbuf ? Buffer.alloc(0) : \"\";\n    var str = this._buf.slice(this._offset, this._offset + this.length);\n    this._offset += this.length;\n    return retbuf ? str : str.toString(\"utf8\");\n};\nReader.prototype.readOID = function(tag) {\n    if (!tag) tag = ASN1.OID;\n    var b = this.readString(tag, true);\n    if (b === null) return null;\n    var values = [];\n    var value = 0;\n    for(var i = 0; i < b.length; i++){\n        var byte = b[i] & 0xff;\n        value <<= 7;\n        value += byte & 0x7f;\n        if ((byte & 0x80) === 0) {\n            values.push(value);\n            value = 0;\n        }\n    }\n    value = values.shift();\n    values.unshift(value % 40);\n    values.unshift(value / 40 >> 0);\n    return values.join(\".\");\n};\nReader.prototype._readTag = function(tag) {\n    assert.ok(tag !== undefined);\n    var b = this.peek();\n    if (b === null) return null;\n    if (b !== tag) throw newInvalidAsn1Error(\"Expected 0x\" + tag.toString(16) + \": got 0x\" + b.toString(16));\n    var o = this.readLength(this._offset + 1); // stored in `length`\n    if (o === null) return null;\n    if (this.length > 4) throw newInvalidAsn1Error(\"Integer too long: \" + this.length);\n    if (this.length > this._size - o) return null;\n    this._offset = o;\n    var fb = this._buf[this._offset];\n    var value = 0;\n    for(var i = 0; i < this.length; i++){\n        value <<= 8;\n        value |= this._buf[this._offset++] & 0xff;\n    }\n    if ((fb & 0x80) === 0x80 && i !== 4) value -= 1 << i * 8;\n    return value >> 0;\n};\n// --- Exported API\nmodule.exports = Reader;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3JlYWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxzRUFBc0U7QUFFdEUsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0QsOEZBQThCO0FBRTNDLElBQUlFLE9BQU9GLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDO0FBR3JCLGNBQWM7QUFFZCxJQUFJSSxzQkFBc0JELE9BQU9DLG1CQUFtQjtBQUlwRCxVQUFVO0FBRVYsU0FBU0MsT0FBT0MsSUFBSTtJQUNsQixJQUFJLENBQUNBLFFBQVEsQ0FBQ0wsT0FBT00sUUFBUSxDQUFDRCxPQUM1QixNQUFNLElBQUlFLFVBQVU7SUFFdEIsSUFBSSxDQUFDQyxJQUFJLEdBQUdIO0lBQ1osSUFBSSxDQUFDSSxLQUFLLEdBQUdKLEtBQUtLLE1BQU07SUFFeEIsaUNBQWlDO0lBQ2pDLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDQyxPQUFPLEdBQUc7QUFDakI7QUFFQUMsT0FBT0MsY0FBYyxDQUFDVixPQUFPVyxTQUFTLEVBQUUsVUFBVTtJQUNoREMsWUFBWTtJQUNaQyxLQUFLO1FBQWMsT0FBUSxJQUFJLENBQUNOLElBQUk7SUFBRztBQUN6QztBQUVBRSxPQUFPQyxjQUFjLENBQUNWLE9BQU9XLFNBQVMsRUFBRSxVQUFVO0lBQ2hEQyxZQUFZO0lBQ1pDLEtBQUs7UUFBYyxPQUFRLElBQUksQ0FBQ0wsT0FBTztJQUFHO0FBQzVDO0FBRUFDLE9BQU9DLGNBQWMsQ0FBQ1YsT0FBT1csU0FBUyxFQUFFLFVBQVU7SUFDaERFLEtBQUs7UUFBYyxPQUFRLElBQUksQ0FBQ1IsS0FBSyxHQUFHLElBQUksQ0FBQ0csT0FBTztJQUFHO0FBQ3pEO0FBRUFDLE9BQU9DLGNBQWMsQ0FBQ1YsT0FBT1csU0FBUyxFQUFFLFVBQVU7SUFDaERFLEtBQUs7UUFBYyxPQUFRLElBQUksQ0FBQ1QsSUFBSSxDQUFDVSxLQUFL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QUFLLElBQUcsTUFBTyxRQUFRNUIsTUFBTSxHQUNoQ3FCLFNBQVUsS0FBTXJCLElBQUk7SUFFdEIsT0FBT3FCLFNBQVM7QUFDbEI7QUFJQSxtQkFBbUI7QUFFbkJRLE9BQU9DLE9BQU8sR0FBR3BEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL2FzbjEvbGliL2Jlci9yZWFkZXIuanM/ZmE0OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMSBNYXJrIENhdmFnZSA8bWNhdmFnZUBnbWFpbC5jb20+IEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbnZhciBCdWZmZXIgPSByZXF1aXJlKCdzYWZlci1idWZmZXInKS5CdWZmZXI7XG5cbnZhciBBU04xID0gcmVxdWlyZSgnLi90eXBlcycpO1xudmFyIGVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG5cblxuLy8gLS0tIEdsb2JhbHNcblxudmFyIG5ld0ludmFsaWRBc24xRXJyb3IgPSBlcnJvcnMubmV3SW52YWxpZEFzbjFFcnJvcjtcblxuXG5cbi8vIC0tLSBBUElcblxuZnVuY3Rpb24gUmVhZGVyKGRhdGEpIHtcbiAgaWYgKCFkYXRhIHx8ICFCdWZmZXIuaXNCdWZmZXIoZGF0YSkpXG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZGF0YSBtdXN0IGJlIGEgbm9kZSBCdWZmZXInKTtcblxuICB0aGlzLl9idWYgPSBkYXRhO1xuICB0aGlzLl9zaXplID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gVGhlc2UgaG9sZCB0aGUgXCJjdXJyZW50XCIgc3RhdGVcbiAgdGhpcy5fbGVuID0gMDtcbiAgdGhpcy5fb2Zmc2V0ID0gMDtcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRlci5wcm90b3R5cGUsICdsZW5ndGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuX2xlbik7IH1cbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAodGhpcy5fb2Zmc2V0KTsgfVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkZXIucHJvdG90eXBlLCAncmVtYWluJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLl9zaXplIC0gdGhpcy5fb2Zmc2V0KTsgfVxufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkZXIucHJvdG90eXBlLCAnYnVmZmVyJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLl9idWYuc2xpY2UodGhpcy5fb2Zmc2V0KSk7IH1cbn0pO1xuXG5cbi8qKlxuICogUmVhZHMgYSBzaW5nbGUgYnl0ZSBhbmQgYWR2YW5jZXMgb2Zmc2V0OyB5b3UgY2FuIHBhc3MgaW4gYHRydWVgIHRvIG1ha2UgdGhpc1xuICogYSBcInBlZWtcIiBvcGVyYXRpb24gKGkuZS4sIGdldCB0aGUgYnl0ZSwgYnV0IGRvbid0IGFkdmFuY2UgdGhlIG9mZnNldCkuXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBwZWVrIHRydWUgbWVhbnMgZG9uJ3QgbW92ZSBvZmZzZXQuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHRoZSBuZXh0IGJ5dGUsIG51bGwgaWYgbm90IGVub3VnaCBkYXRhLlxuICovXG5SZWFkZXIucHJvdG90eXBlLnJlYWRCeXRlID0gZnVuY3Rpb24gKHBlZWspIHtcbiAgaWYgKHRoaXMuX3NpemUgLSB0aGlzLl9vZmZzZXQgPCAxKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHZhciBiID0gdGhpcy5fYnVmW3RoaXMuX29mZnNldF0gJiAweGZmO1xuXG4gIGlmICghcGVlaylcbiAgICB0aGlzLl9vZmZzZXQgKz0gMTtcblxuICByZXR1cm4gYjtcbn07XG5cblxuUmVhZGVyLnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yZWFkQnl0ZSh0cnVlKTtcbn07XG5cblxuLyoqXG4gKiBSZWFkcyBhIChwb3RlbnRpYWxseSkgdmFyaWFibGUgbGVuZ3RoIG9mZiB0aGUgQkVSIGJ1ZmZlci4gIFRoaXMgY2FsbCBpc1xuICogbm90IHJlYWxseSBtZWFudCB0byBiZSBjYWxsZWQgZGlyZWN0bHksIGFzIGNhbGxlcnMgaGF2ZSB0byBtYW5pcHVsYXRlXG4gKiB0aGUgaW50ZXJuYWwgYnVmZmVyIGFmdGVyd2FyZHMuXG4gKlxuICogQXMgYSByZXN1bHQgb2YgdGhpcyBjYWxsLCB5b3UgY2FuIGNhbGwgYFJlYWRlci5sZW5ndGhgLCB1bnRpbCB0aGVcbiAqIG5leHQgdGhpbmcgY2FsbGVkIHRoYXQgZG9lcyBhIHJlYWRMZW5ndGguXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSB0aGUgYW1vdW50IG9mIG9mZnNldCB0byBhZHZhbmNlIHRoZSBidWZmZXIuXG4gKiBAdGhyb3dzIHtJbnZhbGlkQXNuMUVycm9yfSBvbiBiYWQgQVNOLjFcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5yZWFkTGVuZ3RoID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpXG4gICAgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0O1xuXG4gIGlmIChvZmZzZXQgPj0gdGhpcy5fc2l6ZSlcbiAgICByZXR1cm4gbnVsbDtcblxuICB2YXIgbGVuQiA9IHRoaXMuX2J1ZltvZmZzZXQrK10gJiAweGZmO1xuICBpZiAobGVuQiA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICBpZiAoKGxlbkIgJiAweDgwKSA9PT0gMHg4MCkge1xuICAgIGxlbkIgJj0gMHg3ZjtcblxuICAgIGlmIChsZW5CID09PSAwKVxuICAgICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignSW5kZWZpbml0ZSBsZW5ndGggbm90IHN1cHBvcnRlZCcpO1xuXG4gICAgaWYgKGxlbkIgPiA0KVxuICAgICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignZW5jb2RpbmcgdG9vIGxvbmcnKTtcblxuICAgIGlmICh0aGlzLl9zaXplIC0gb2Zmc2V0IDwgbGVuQilcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgdGhpcy5fbGVuID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbkI7IGkrKylcbiAgICAgIHRoaXMuX2xlbiA9ICh0aGlzLl9sZW4gPDwgOCkgKyAodGhpcy5fYnVmW29mZnNldCsrXSAmIDB4ZmYpO1xuXG4gIH0gZWxzZSB7XG4gICAgLy8gV2Fzbid0IGEgdmFyaWFibGUgbGVuZ3RoXG4gICAgdGhpcy5fbGVuID0gbGVuQjtcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQ7XG59O1xuXG5cbi8qKlxuICogUGFyc2VzIHRoZSBuZXh0IHNlcXVlbmNlIGluIHRoaXMgQkVSIGJ1ZmZlci5cbiAqXG4gKiBUbyBnZXQgdGhlIGxlbmd0aCBvZiB0aGUgc2VxdWVuY2UsIGNhbGwgYFJlYWRlci5sZW5ndGhgLlxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gdGhlIHNlcXVlbmNlJ3MgdGFnLlxuICovXG5SZWFkZXIucHJvdG90eXBlLnJlYWRTZXF1ZW5jZSA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgdmFyIHNlcSA9IHRoaXMucGVlaygpO1xuICBpZiAoc2VxID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuICBpZiAodGFnICE9PSB1bmRlZmluZWQgJiYgdGFnICE9PSBzZXEpXG4gICAgdGhyb3cgbmV3SW52YWxpZEFzbjFFcnJvcignRXhwZWN0ZWQgMHgnICsgdGFnLnRvU3RyaW5nKDE2KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnOiBnb3QgMHgnICsgc2VxLnRvU3RyaW5nKDE2KSk7XG5cbiAgdmFyIG8gPSB0aGlzLnJlYWRMZW5ndGgodGhpcy5fb2Zmc2V0ICsgMSk7IC8vIHN0b3JlZCBpbiBgbGVuZ3RoYFxuICBpZiAobyA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICB0aGlzLl9vZmZzZXQgPSBvO1xuICByZXR1cm4gc2VxO1xufTtcblxuXG5SZWFkZXIucHJvdG90eXBlLnJlYWRJbnQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkVGFnKEFTTjEuSW50ZWdlcik7XG59O1xuXG5cblJlYWRlci5wcm90b3R5cGUucmVhZEJvb2xlYW4gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAodGhpcy5fcmVhZFRhZyhBU04xLkJvb2xlYW4pID09PSAwID8gZmFsc2UgOiB0cnVlKTtcbn07XG5cblxuUmVhZGVyLnByb3RvdHlwZS5yZWFkRW51bWVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkVGFnKEFTTjEuRW51bWVyYXRpb24pO1xufTtcblxuXG5SZWFkZXIucHJvdG90eXBlLnJlYWRTdHJpbmcgPSBmdW5jdGlvbiAodGFnLCByZXRidWYpIHtcbiAgaWYgKCF0YWcpXG4gICAgdGFnID0gQVNOMS5PY3RldFN0cmluZztcblxuICB2YXIgYiA9IHRoaXMucGVlaygpO1xuICBpZiAoYiA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICBpZiAoYiAhPT0gdGFnKVxuICAgIHRocm93IG5ld0ludmFsaWRBc24xRXJyb3IoJ0V4cGVjdGVkIDB4JyArIHRhZy50b1N0cmluZygxNikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzogZ290IDB4JyArIGIudG9TdHJpbmcoMTYpKTtcblxuICB2YXIgbyA9IHRoaXMucmVhZExlbmd0aCh0aGlzLl9vZmZzZXQgKyAxKTsgLy8gc3RvcmVkIGluIGBsZW5ndGhgXG5cbiAgaWYgKG8gPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gdGhpcy5fc2l6ZSAtIG8pXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgdGhpcy5fb2Zmc2V0ID0gbztcblxuICBpZiAodGhpcy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIHJldGJ1ZiA/IEJ1ZmZlci5hbGxvYygwKSA6ICcnO1xuXG4gIHZhciBzdHIgPSB0aGlzLl9idWYuc2xpY2UodGhpcy5fb2Zmc2V0LCB0aGlzLl9vZmZzZXQgKyB0aGlzLmxlbmd0aCk7XG4gIHRoaXMuX29mZnNldCArPSB0aGlzLmxlbmd0aDtcblxuICByZXR1cm4gcmV0YnVmID8gc3RyIDogc3RyLnRvU3RyaW5nKCd1dGY4Jyk7XG59O1xuXG5SZWFkZXIucHJvdG90eXBlLnJlYWRPSUQgPSBmdW5jdGlvbiAodGFnKSB7XG4gIGlmICghdGFnKVxuICAgIHRhZyA9IEFTTjEuT0lEO1xuXG4gIHZhciBiID0gdGhpcy5yZWFkU3RyaW5nKHRhZywgdHJ1ZSk7XG4gIGlmIChiID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIHZhbHVlID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYnl0ZSA9IGJbaV0gJiAweGZmO1xuXG4gICAgdmFsdWUgPDw9IDc7XG4gICAgdmFsdWUgKz0gYnl0ZSAmIDB4N2Y7XG4gICAgaWYgKChieXRlICYgMHg4MCkgPT09IDApIHtcbiAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIHZhbHVlID0gMDtcbiAgICB9XG4gIH1cblxuICB2YWx1ZSA9IHZhbHVlcy5zaGlmdCgpO1xuICB2YWx1ZXMudW5zaGlmdCh2YWx1ZSAlIDQwKTtcbiAgdmFsdWVzLnVuc2hpZnQoKHZhbHVlIC8gNDApID4+IDApO1xuXG4gIHJldHVybiB2YWx1ZXMuam9pbignLicpO1xufTtcblxuXG5SZWFkZXIucHJvdG90eXBlLl9yZWFkVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICBhc3NlcnQub2sodGFnICE9PSB1bmRlZmluZWQpO1xuXG4gIHZhciBiID0gdGhpcy5wZWVrKCk7XG5cbiAgaWYgKGIgPT09IG51bGwpXG4gICAgcmV0dXJuIG51bGw7XG5cbiAgaWYgKGIgIT09IHRhZylcbiAgICB0aHJvdyBuZXdJbnZhbGlkQXNuMUVycm9yKCdFeHBlY3RlZCAweCcgKyB0YWcudG9TdHJpbmcoMTYpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc6IGdvdCAweCcgKyBiLnRvU3RyaW5nKDE2KSk7XG5cbiAgdmFyIG8gPSB0aGlzLnJlYWRMZW5ndGgodGhpcy5fb2Zmc2V0ICsgMSk7IC8vIHN0b3JlZCBpbiBgbGVuZ3RoYFxuICBpZiAobyA9PT0gbnVsbClcbiAgICByZXR1cm4gbnVsbDtcblxuICBpZiAodGhpcy5sZW5ndGggPiA0KVxuICAgIHRocm93IG5ld0ludmFsaWRBc24xRXJyb3IoJ0ludGVnZXIgdG9vIGxvbmc6ICcgKyB0aGlzLmxlbmd0aCk7XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gdGhpcy5fc2l6ZSAtIG8pXG4gICAgcmV0dXJuIG51bGw7XG4gIHRoaXMuX29mZnNldCA9IG87XG5cbiAgdmFyIGZiID0gdGhpcy5fYnVmW3RoaXMuX29mZnNldF07XG4gIHZhciB2YWx1ZSA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFsdWUgPDw9IDg7XG4gICAgdmFsdWUgfD0gKHRoaXMuX2J1Zlt0aGlzLl9vZmZzZXQrK10gJiAweGZmKTtcbiAgfVxuXG4gIGlmICgoZmIgJiAweDgwKSA9PT0gMHg4MCAmJiBpICE9PSA0KVxuICAgIHZhbHVlIC09ICgxIDw8IChpICogOCkpO1xuXG4gIHJldHVybiB2YWx1ZSA+PiAwO1xufTtcblxuXG5cbi8vIC0tLSBFeHBvcnRlZCBBUElcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFkZXI7XG4iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsIkJ1ZmZlciIsIkFTTjEiLCJlcnJvcnMiLCJuZXdJbnZhbGlkQXNuMUVycm9yIiwiUmVhZGVyIiwiZGF0YSIsImlzQnVmZmVyIiwiVHlwZUVycm9yIiwiX2J1ZiIsIl9zaXplIiwibGVuZ3RoIiwiX2xlbiIsIl9vZmZzZXQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvdHlwZSIsImVudW1lcmFibGUiLCJnZXQiLCJzbGljZSIsInJlYWRCeXRlIiwicGVlayIsImIiLCJyZWFkTGVuZ3RoIiwib2Zmc2V0IiwidW5kZWZpbmVkIiwibGVuQiIsImkiLCJyZWFkU2VxdWVuY2UiLCJ0YWciLCJzZXEiLCJ0b1N0cmluZyIsIm8iLCJyZWFkSW50IiwiX3JlYWRUYWciLCJJbnRlZ2VyIiwicmVhZEJvb2xlYW4iLCJCb29sZWFuIiwicmVhZEVudW1lcmF0aW9uIiwiRW51bWVyYXRpb24iLCJyZWFkU3RyaW5nIiwicmV0YnVmIiwiT2N0ZXRTdHJpbmciLCJhbGxvYyIsInN0ciIsInJlYWRPSUQiLCJPSUQiLCJ2YWx1ZXMiLCJ2YWx1ZSIsImJ5dGUiLCJwdXNoIiwic2hpZnQiLCJ1bnNoaWZ0Iiwiam9pbiIsIm9rIiwiZmIiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/ber/types.js":
/*!********************************************!*\
  !*** ./node_modules/asn1/lib/ber/types.js ***!
  \********************************************/
/***/ ((module) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nmodule.exports = {\n    EOC: 0,\n    Boolean: 1,\n    Integer: 2,\n    BitString: 3,\n    OctetString: 4,\n    Null: 5,\n    OID: 6,\n    ObjectDescriptor: 7,\n    External: 8,\n    Real: 9,\n    Enumeration: 10,\n    PDV: 11,\n    Utf8String: 12,\n    RelativeOID: 13,\n    Sequence: 16,\n    Set: 17,\n    NumericString: 18,\n    PrintableString: 19,\n    T61String: 20,\n    VideotexString: 21,\n    IA5String: 22,\n    UTCTime: 23,\n    GeneralizedTime: 24,\n    GraphicString: 25,\n    VisibleString: 26,\n    GeneralString: 28,\n    UniversalString: 29,\n    CharacterString: 30,\n    BMPString: 31,\n    Constructor: 32,\n    Context: 128\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3R5cGVzLmpzPzU5NTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTEgTWFyayBDYXZhZ2UgPG1jYXZhZ2VAZ21haWwuY29tPiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFT0M6IDAsXG4gIEJvb2xlYW46IDEsXG4gIEludGVnZXI6IDIsXG4gIEJpdFN0cmluZzogMyxcbiAgT2N0ZXRTdHJpbmc6IDQsXG4gIE51bGw6IDUsXG4gIE9JRDogNixcbiAgT2JqZWN0RGVzY3JpcHRvcjogNyxcbiAgRXh0ZXJuYWw6IDgsXG4gIFJlYWw6IDksIC8vIGZsb2F0XG4gIEVudW1lcmF0aW9uOiAxMCxcbiAgUERWOiAxMSxcbiAgVXRmOFN0cmluZzogMTIsXG4gIFJlbGF0aXZlT0lEOiAxMyxcbiAgU2VxdWVuY2U6IDE2LFxuICBTZXQ6IDE3LFxuICBOdW1lcmljU3RyaW5nOiAxOCxcbiAgUHJpbnRhYmxlU3RyaW5nOiAxOSxcbiAgVDYxU3RyaW5nOiAyMCxcbiAgVmlkZW90ZXhTdHJpbmc6IDIxLFxuICBJQTVTdHJpbmc6IDIyLFxuICBVVENUaW1lOiAyMyxcbiAgR2VuZXJhbGl6ZWRUaW1lOiAyNCxcbiAgR3JhcGhpY1N0cmluZzogMjUsXG4gIFZpc2libGVTdHJpbmc6IDI2LFxuICBHZW5lcmFsU3RyaW5nOiAyOCxcbiAgVW5pdmVyc2FsU3RyaW5nOiAyOSxcbiAgQ2hhcmFjdGVyU3RyaW5nOiAzMCxcbiAgQk1QU3RyaW5nOiAzMSxcbiAgQ29uc3RydWN0b3I6IDMyLFxuICBDb250ZXh0OiAxMjhcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkVPQyIsIkJvb2xlYW4iLCJJbnRlZ2VyIiwiQml0U3RyaW5nIiwiT2N0ZXRTdHJpbmciLCJOdWxsIiwiT0lEIiwiT2JqZWN0RGVzY3JpcHRvciIsIkV4dGVybmFsIiwiUmVhbCIsIkVudW1lcmF0aW9uIiwiUERWIiwiVXRmOFN0cmluZyIsIlJlbGF0aXZlT0lEIiwiU2VxdWVuY2UiLCJTZXQiLCJOdW1lcmljU3RyaW5nIiwiUHJpbnRhYmxlU3RyaW5nIiwiVDYxU3RyaW5nIiwiVmlkZW90ZXhTdHJpbmciLCJJQTVTdHJpbmciLCJVVENUaW1lIiwiR2VuZXJhbGl6ZWRUaW1lIiwiR3JhcGhpY1N0cmluZyIsIlZpc2libGVTdHJpbmciLCJHZW5lcmFsU3RyaW5nIiwiVW5pdmVyc2FsU3RyaW5nIiwiQ2hhcmFjdGVyU3RyaW5nIiwiQk1QU3RyaW5nIiwiQ29uc3RydWN0b3IiLCJDb250ZXh0Il0sIm1hcHBpbmdzIjoiQUFBQSxzRUFBc0U7QUFHdEVBLE9BQU9DLE9BQU8sR0FBRztJQUNmQyxLQUFLO0lBQ0xDLFNBQVM7SUFDVEMsU0FBUztJQUNUQyxXQUFXO0lBQ1hDLGFBQWE7SUFDYkMsTUFBTTtJQUNOQyxLQUFLO0lBQ0xDLGtCQUFrQjtJQUNsQkMsVUFBVTtJQUNWQyxNQUFNO0lBQ05DLGFBQWE7SUFDYkMsS0FBSztJQUNMQyxZQUFZO0lBQ1pDLGFBQWE7SUFDYkMsVUFBVTtJQUNWQyxLQUFLO0lBQ0xDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxXQUFXO0lBQ1hDLGdCQUFnQjtJQUNoQkMsV0FBVztJQUNYQyxTQUFTO0lBQ1RDLGlCQUFpQjtJQUNqQkMsZUFBZTtJQUNmQyxlQUFlO0lBQ2ZDLGVBQWU7SUFDZkMsaUJBQWlCO0lBQ2pCQyxpQkFBaUI7SUFDakJDLFdBQVc7SUFDWEMsYUFBYTtJQUNiQyxTQUFTO0FBQ1giLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvYmVyL3R5cGVzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/ber/writer.js":
/*!*********************************************!*\
  !*** ./node_modules/asn1/lib/ber/writer.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar Buffer = (__webpack_require__(/*! safer-buffer */ \"(ssr)/./node_modules/safer-buffer/safer.js\").Buffer);\nvar ASN1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/asn1/lib/ber/types.js\");\nvar errors = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/asn1/lib/ber/errors.js\");\n// --- Globals\nvar newInvalidAsn1Error = errors.newInvalidAsn1Error;\nvar DEFAULT_OPTS = {\n    size: 1024,\n    growthFactor: 8\n};\n// --- Helpers\nfunction merge(from, to) {\n    assert.ok(from);\n    assert.equal(typeof from, \"object\");\n    assert.ok(to);\n    assert.equal(typeof to, \"object\");\n    var keys = Object.getOwnPropertyNames(from);\n    keys.forEach(function(key) {\n        if (to[key]) return;\n        var value = Object.getOwnPropertyDescriptor(from, key);\n        Object.defineProperty(to, key, value);\n    });\n    return to;\n}\n// --- API\nfunction Writer(options) {\n    options = merge(DEFAULT_OPTS, options || {});\n    this._buf = Buffer.alloc(options.size || 1024);\n    this._size = this._buf.length;\n    this._offset = 0;\n    this._options = options;\n    // A list of offsets in the buffer where we need to insert\n    // sequence tag/len pairs.\n    this._seq = [];\n}\nObject.defineProperty(Writer.prototype, \"buffer\", {\n    get: function() {\n        if (this._seq.length) throw newInvalidAsn1Error(this._seq.length + \" unended sequence(s)\");\n        return this._buf.slice(0, this._offset);\n    }\n});\nWriter.prototype.writeByte = function(b) {\n    if (typeof b !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(1);\n    this._buf[this._offset++] = b;\n};\nWriter.prototype.writeInt = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Integer;\n    var sz = 4;\n    while(((i & 0xff800000) === 0 || (i & 0xff800000) === 0xff800000 >> 0) && sz > 1){\n        sz--;\n        i <<= 8;\n    }\n    if (sz > 4) throw newInvalidAsn1Error(\"BER ints cannot be > 0xffffffff\");\n    this._ensure(2 + sz);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = sz;\n    while(sz-- > 0){\n        this._buf[this._offset++] = (i & 0xff000000) >>> 24;\n        i <<= 8;\n    }\n};\nWriter.prototype.writeNull = function() {\n    this.writeByte(ASN1.Null);\n    this.writeByte(0x00);\n};\nWriter.prototype.writeEnumeration = function(i, tag) {\n    if (typeof i !== \"number\") throw new TypeError(\"argument must be a Number\");\n    if (typeof tag !== \"number\") tag = ASN1.Enumeration;\n    return this.writeInt(i, tag);\n};\nWriter.prototype.writeBoolean = function(b, tag) {\n    if (typeof b !== \"boolean\") throw new TypeError(\"argument must be a Boolean\");\n    if (typeof tag !== \"number\") tag = ASN1.Boolean;\n    this._ensure(3);\n    this._buf[this._offset++] = tag;\n    this._buf[this._offset++] = 0x01;\n    this._buf[this._offset++] = b ? 0xff : 0x00;\n};\nWriter.prototype.writeString = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string (was: \" + typeof s + \")\");\n    if (typeof tag !== \"number\") tag = ASN1.OctetString;\n    var len = Buffer.byteLength(s);\n    this.writeByte(tag);\n    this.writeLength(len);\n    if (len) {\n        this._ensure(len);\n        this._buf.write(s, this._offset);\n        this._offset += len;\n    }\n};\nWriter.prototype.writeBuffer = function(buf, tag) {\n    if (typeof tag !== \"number\") throw new TypeError(\"tag must be a number\");\n    if (!Buffer.isBuffer(buf)) throw new TypeError(\"argument must be a buffer\");\n    this.writeByte(tag);\n    this.writeLength(buf.length);\n    this._ensure(buf.length);\n    buf.copy(this._buf, this._offset, 0, buf.length);\n    this._offset += buf.length;\n};\nWriter.prototype.writeStringArray = function(strings) {\n    if (!strings instanceof Array) throw new TypeError(\"argument must be an Array[String]\");\n    var self = this;\n    strings.forEach(function(s) {\n        self.writeString(s);\n    });\n};\n// This is really to solve DER cases, but whatever for now\nWriter.prototype.writeOID = function(s, tag) {\n    if (typeof s !== \"string\") throw new TypeError(\"argument must be a string\");\n    if (typeof tag !== \"number\") tag = ASN1.OID;\n    if (!/^([0-9]+\\.){3,}[0-9]+$/.test(s)) throw new Error(\"argument is not a valid OID string\");\n    function encodeOctet(bytes, octet) {\n        if (octet < 128) {\n            bytes.push(octet);\n        } else if (octet < 16384) {\n            bytes.push(octet >>> 7 | 0x80);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 2097152) {\n            bytes.push(octet >>> 14 | 0x80);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else if (octet < 268435456) {\n            bytes.push(octet >>> 21 | 0x80);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        } else {\n            bytes.push((octet >>> 28 | 0x80) & 0xFF);\n            bytes.push((octet >>> 21 | 0x80) & 0xFF);\n            bytes.push((octet >>> 14 | 0x80) & 0xFF);\n            bytes.push((octet >>> 7 | 0x80) & 0xFF);\n            bytes.push(octet & 0x7F);\n        }\n    }\n    var tmp = s.split(\".\");\n    var bytes = [];\n    bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));\n    tmp.slice(2).forEach(function(b) {\n        encodeOctet(bytes, parseInt(b, 10));\n    });\n    var self = this;\n    this._ensure(2 + bytes.length);\n    this.writeByte(tag);\n    this.writeLength(bytes.length);\n    bytes.forEach(function(b) {\n        self.writeByte(b);\n    });\n};\nWriter.prototype.writeLength = function(len) {\n    if (typeof len !== \"number\") throw new TypeError(\"argument must be a Number\");\n    this._ensure(4);\n    if (len <= 0x7f) {\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xff) {\n        this._buf[this._offset++] = 0x81;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffff) {\n        this._buf[this._offset++] = 0x82;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else if (len <= 0xffffff) {\n        this._buf[this._offset++] = 0x83;\n        this._buf[this._offset++] = len >> 16;\n        this._buf[this._offset++] = len >> 8;\n        this._buf[this._offset++] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Length too long (> 4 bytes)\");\n    }\n};\nWriter.prototype.startSequence = function(tag) {\n    if (typeof tag !== \"number\") tag = ASN1.Sequence | ASN1.Constructor;\n    this.writeByte(tag);\n    this._seq.push(this._offset);\n    this._ensure(3);\n    this._offset += 3;\n};\nWriter.prototype.endSequence = function() {\n    var seq = this._seq.pop();\n    var start = seq + 3;\n    var len = this._offset - start;\n    if (len <= 0x7f) {\n        this._shift(start, len, -2);\n        this._buf[seq] = len;\n    } else if (len <= 0xff) {\n        this._shift(start, len, -1);\n        this._buf[seq] = 0x81;\n        this._buf[seq + 1] = len;\n    } else if (len <= 0xffff) {\n        this._buf[seq] = 0x82;\n        this._buf[seq + 1] = len >> 8;\n        this._buf[seq + 2] = len;\n    } else if (len <= 0xffffff) {\n        this._shift(start, len, 1);\n        this._buf[seq] = 0x83;\n        this._buf[seq + 1] = len >> 16;\n        this._buf[seq + 2] = len >> 8;\n        this._buf[seq + 3] = len;\n    } else {\n        throw newInvalidAsn1Error(\"Sequence too long\");\n    }\n};\nWriter.prototype._shift = function(start, len, shift) {\n    assert.ok(start !== undefined);\n    assert.ok(len !== undefined);\n    assert.ok(shift);\n    this._buf.copy(this._buf, start + shift, start, start + len);\n    this._offset += shift;\n};\nWriter.prototype._ensure = function(len) {\n    assert.ok(len);\n    if (this._size - this._offset < len) {\n        var sz = this._size * this._options.growthFactor;\n        if (sz - this._offset < len) sz += len;\n        var buf = Buffer.alloc(sz);\n        this._buf.copy(buf, 0, 0, this._offset);\n        this._buf = buf;\n        this._size = sz;\n    }\n};\n// --- Exported API\nmodule.exports = Writer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/ber/writer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/asn1/lib/index.js":
/*!****************************************!*\
  !*** ./node_modules/asn1/lib/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.\n// If you have no idea what ASN.1 or BER is, see this:\n// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc\nvar Ber = __webpack_require__(/*! ./ber/index */ \"(ssr)/./node_modules/asn1/lib/ber/index.js\");\n// --- Exported API\nmodule.exports = {\n    Ber: Ber,\n    BerReader: Ber.Reader,\n    BerWriter: Ber.Writer\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvYXNuMS9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsc0VBQXNFO0FBRXRFLHNEQUFzRDtBQUN0RCw4Q0FBOEM7QUFFOUMsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUM7QUFJbEIsbUJBQW1CO0FBRW5CQyxPQUFPQyxPQUFPLEdBQUc7SUFFZkgsS0FBS0E7SUFFTEksV0FBV0osSUFBSUssTUFBTTtJQUVyQkMsV0FBV04sSUFBSU8sTUFBTTtBQUV2QiIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9hc24xL2xpYi9pbmRleC5qcz9lMTBkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDExIE1hcmsgQ2F2YWdlIDxtY2F2YWdlQGdtYWlsLmNvbT4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblxuLy8gSWYgeW91IGhhdmUgbm8gaWRlYSB3aGF0IEFTTi4xIG9yIEJFUiBpcywgc2VlIHRoaXM6XG4vLyBmdHA6Ly9mdHAucnNhLmNvbS9wdWIvcGtjcy9hc2NpaS9sYXltYW4uYXNjXG5cbnZhciBCZXIgPSByZXF1aXJlKCcuL2Jlci9pbmRleCcpO1xuXG5cblxuLy8gLS0tIEV4cG9ydGVkIEFQSVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBCZXI6IEJlcixcblxuICBCZXJSZWFkZXI6IEJlci5SZWFkZXIsXG5cbiAgQmVyV3JpdGVyOiBCZXIuV3JpdGVyXG5cbn07XG4iXSwibmFtZXMiOlsiQmVyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJCZXJSZWFkZXIiLCJSZWFkZXIiLCJCZXJXcml0ZXIiLCJXcml0ZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/asn1/lib/index.js\n");

/***/ })

};
;