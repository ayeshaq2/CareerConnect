/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dateformat";
exports.ids = ["vendor-chunks/dateformat"];
exports.modules = {

/***/ "(ssr)/./node_modules/dateformat/lib/dateformat.js":
/*!***************************************************!*\
  !*** ./node_modules/dateformat/lib/dateformat.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */ (function(global) {\n    \"use strict\";\n    var dateFormat = function() {\n        var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n        var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n        var timezoneClip = /[^-+\\dA-Z]/g;\n        // Regexes and supporting functions are cached through closure\n        return function(date, mask, utc, gmt) {\n            // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n            if (arguments.length === 1 && kindOf(date) === \"string\" && !/\\d/.test(date)) {\n                mask = date;\n                date = undefined;\n            }\n            date = date || new Date;\n            if (!(date instanceof Date)) {\n                date = new Date(date);\n            }\n            if (isNaN(date)) {\n                throw TypeError(\"Invalid date\");\n            }\n            mask = String(dateFormat.masks[mask] || mask || dateFormat.masks[\"default\"]);\n            // Allow setting the utc/gmt argument via the mask\n            var maskSlice = mask.slice(0, 4);\n            if (maskSlice === \"UTC:\" || maskSlice === \"GMT:\") {\n                mask = mask.slice(4);\n                utc = true;\n                if (maskSlice === \"GMT:\") {\n                    gmt = true;\n                }\n            }\n            var _ = utc ? \"getUTC\" : \"get\";\n            var d = date[_ + \"Date\"]();\n            var D = date[_ + \"Day\"]();\n            var m = date[_ + \"Month\"]();\n            var y = date[_ + \"FullYear\"]();\n            var H = date[_ + \"Hours\"]();\n            var M = date[_ + \"Minutes\"]();\n            var s = date[_ + \"Seconds\"]();\n            var L = date[_ + \"Milliseconds\"]();\n            var o = utc ? 0 : date.getTimezoneOffset();\n            var W = getWeek(date);\n            var N = getDayOfWeek(date);\n            var flags = {\n                d: d,\n                dd: pad(d),\n                ddd: dateFormat.i18n.dayNames[D],\n                dddd: dateFormat.i18n.dayNames[D + 7],\n                m: m + 1,\n                mm: pad(m + 1),\n                mmm: dateFormat.i18n.monthNames[m],\n                mmmm: dateFormat.i18n.monthNames[m + 12],\n                yy: String(y).slice(2),\n                yyyy: y,\n                h: H % 12 || 12,\n                hh: pad(H % 12 || 12),\n                H: H,\n                HH: pad(H),\n                M: M,\n                MM: pad(M),\n                s: s,\n                ss: pad(s),\n                l: pad(L, 3),\n                L: pad(Math.round(L / 10)),\n                t: H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n                tt: H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n                T: H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n                TT: H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n                Z: gmt ? \"GMT\" : utc ? \"UTC\" : (String(date).match(timezone) || [\n                    \"\"\n                ]).pop().replace(timezoneClip, \"\"),\n                o: (o > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n                S: [\n                    \"th\",\n                    \"st\",\n                    \"nd\",\n                    \"rd\"\n                ][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n                W: W,\n                N: N\n            };\n            return mask.replace(token, function(match) {\n                if (match in flags) {\n                    return flags[match];\n                }\n                return match.slice(1, match.length - 1);\n            });\n        };\n    }();\n    dateFormat.masks = {\n        \"default\": \"ddd mmm dd yyyy HH:MM:ss\",\n        \"shortDate\": \"m/d/yy\",\n        \"mediumDate\": \"mmm d, yyyy\",\n        \"longDate\": \"mmmm d, yyyy\",\n        \"fullDate\": \"dddd, mmmm d, yyyy\",\n        \"shortTime\": \"h:MM TT\",\n        \"mediumTime\": \"h:MM:ss TT\",\n        \"longTime\": \"h:MM:ss TT Z\",\n        \"isoDate\": \"yyyy-mm-dd\",\n        \"isoTime\": \"HH:MM:ss\",\n        \"isoDateTime\": \"yyyy-mm-dd'T'HH:MM:sso\",\n        \"isoUtcDateTime\": \"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'\",\n        \"expiresHeaderFormat\": \"ddd, dd mmm yyyy HH:MM:ss Z\"\n    };\n    // Internationalization strings\n    dateFormat.i18n = {\n        dayNames: [\n            \"Sun\",\n            \"Mon\",\n            \"Tue\",\n            \"Wed\",\n            \"Thu\",\n            \"Fri\",\n            \"Sat\",\n            \"Sunday\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\"\n        ],\n        monthNames: [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\",\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\"\n        ],\n        timeNames: [\n            \"a\",\n            \"p\",\n            \"am\",\n            \"pm\",\n            \"A\",\n            \"P\",\n            \"AM\",\n            \"PM\"\n        ]\n    };\n    function pad(val, len) {\n        val = String(val);\n        len = len || 2;\n        while(val.length < len){\n            val = \"0\" + val;\n        }\n        return val;\n    }\n    /**\n * Get the ISO 8601 week number\n * Based on comments from\n * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n *\n * @param  {Object} `date`\n * @return {Number}\n */ function getWeek(date) {\n        // Remove time components of date\n        var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n        // Change date to Thursday same week\n        targetThursday.setDate(targetThursday.getDate() - (targetThursday.getDay() + 6) % 7 + 3);\n        // Take January 4th as it is always in week 1 (see ISO 8601)\n        var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n        // Change date to Thursday same week\n        firstThursday.setDate(firstThursday.getDate() - (firstThursday.getDay() + 6) % 7 + 3);\n        // Check if daylight-saving-time-switch occurred and correct for it\n        var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n        targetThursday.setHours(targetThursday.getHours() - ds);\n        // Number of weeks between target Thursday and first Thursday\n        var weekDiff = (targetThursday - firstThursday) / (86400000 * 7);\n        return 1 + Math.floor(weekDiff);\n    }\n    /**\n * Get ISO-8601 numeric representation of the day of the week\n * 1 (for Monday) through 7 (for Sunday)\n * \n * @param  {Object} `date`\n * @return {Number}\n */ function getDayOfWeek(date) {\n        var dow = date.getDay();\n        if (dow === 0) {\n            dow = 7;\n        }\n        return dow;\n    }\n    /**\n * kind-of shortcut\n * @param  {*} val\n * @return {String}\n */ function kindOf(val) {\n        if (val === null) {\n            return \"null\";\n        }\n        if (val === undefined) {\n            return \"undefined\";\n        }\n        if (typeof val !== \"object\") {\n            return typeof val;\n        }\n        if (Array.isArray(val)) {\n            return \"array\";\n        }\n        return ({}).toString.call(val).slice(8, -1).toLowerCase();\n    }\n    ;\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return dateFormat;\n        }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/dateformat/lib/dateformat.js\n");

/***/ })

};
;