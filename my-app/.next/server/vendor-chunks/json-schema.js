/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/json-schema";
exports.ids = ["vendor-chunks/json-schema"];
exports.modules = {

/***/ "(ssr)/./node_modules/json-schema/lib/validate.js":
/*!**************************************************!*\
  !*** ./node_modules/json-schema/lib/validate.js ***!
  \**************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * JSONSchema Validator - Validates JavaScript objects using JSON Schemas\r\n *\t(http://www.json.com/json-schema-proposal/)\r\n * Licensed under AFL-2.1 OR BSD-3-Clause\r\nTo use the validator call the validate function with an instance object and an optional schema object.\r\nIf a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),\r\nthat schema will be used to validate and the schema parameter is not necessary (if both exist,\r\nboth validations will occur).\r\nThe validate method will return an array of validation errors. If there are no errors, then an\r\nempty list will be returned. A validation error will have two properties:\r\n\"property\" which indicates which property had the error\r\n\"message\" which indicates what the error was\r\n */ (function(root, factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n            return factory();\n        }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n})(this, function() {\n    var exports = validate;\n    exports.Integer = {\n        type: \"integer\"\n    };\n    var primitiveConstructors = {\n        String: String,\n        Boolean: Boolean,\n        Number: Number,\n        Object: Object,\n        Array: Array,\n        Date: Date\n    };\n    exports.validate = validate;\n    function validate(/*Any*/ instance, /*Object*/ schema) {\n        // Summary:\n        //  \tTo use the validator call JSONSchema.validate with an instance object and an optional schema object.\n        // \t\tIf a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),\n        // \t\tthat schema will be used to validate and the schema parameter is not necessary (if both exist,\n        // \t\tboth validations will occur).\n        // \t\tThe validate method will return an object with two properties:\n        // \t\t\tvalid: A boolean indicating if the instance is valid by the schema\n        // \t\t\terrors: An array of validation errors. If there are no errors, then an\n        // \t\t\t\t\tempty list will be returned. A validation error will have two properties:\n        // \t\t\t\t\t\tproperty: which indicates which property had the error\n        // \t\t\t\t\t\tmessage: which indicates what the error was\n        //\n        return validate(instance, schema, {\n            changing: false\n        }); //, coerce: false, existingOnly: false});\n    }\n    ;\n    exports.checkPropertyChange = function(/*Any*/ value, /*Object*/ schema, /*String*/ property) {\n        // Summary:\n        // \t\tThe checkPropertyChange method will check to see if an value can legally be in property with the given schema\n        // \t\tThis is slightly different than the validate method in that it will fail if the schema is readonly and it will\n        // \t\tnot check for self-validation, it is assumed that the passed in value is already internally valid.\n        // \t\tThe checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for\n        // \t\tinformation.\n        //\n        return validate(value, schema, {\n            changing: property || \"property\"\n        });\n    };\n    var validate = exports._validate = function(/*Any*/ instance, /*Object*/ schema, /*Object*/ options) {\n        if (!options) options = {};\n        var _changing = options.changing;\n        function getType(schema) {\n            return schema.type || primitiveConstructors[schema.name] == schema && schema.name.toLowerCase();\n        }\n        var errors = [];\n        // validate a value against a property definition\n        function checkProp(value, schema, path, i) {\n            var l;\n            path += path ? typeof i == \"number\" ? \"[\" + i + \"]\" : typeof i == \"undefined\" ? \"\" : \".\" + i : i;\n            function addError(message) {\n                errors.push({\n                    property: path,\n                    message: message\n                });\n            }\n            if ((typeof schema != \"object\" || schema instanceof Array) && (path || typeof schema != \"function\") && !(schema && getType(schema))) {\n                if (typeof schema == \"function\") {\n                    if (!(value instanceof schema)) {\n                        addError(\"is not an instance of the class/constructor \" + schema.name);\n                    }\n                } else if (schema) {\n                    addError(\"Invalid schema/property definition \" + schema);\n                }\n                return null;\n            }\n            if (_changing && schema.readonly) {\n                addError(\"is a readonly field, it can not be changed\");\n            }\n            if (schema[\"extends\"]) {\n                checkProp(value, schema[\"extends\"], path, i);\n            }\n            // validate a value against a type definition\n            function checkType(type, value) {\n                if (type) {\n                    if (typeof type == \"string\" && type != \"any\" && (type == \"null\" ? value !== null : typeof value != type) && !(value instanceof Array && type == \"array\") && !(value instanceof Date && type == \"date\") && !(type == \"integer\" && value % 1 === 0)) {\n                        return [\n                            {\n                                property: path,\n                                message: value + \" - \" + typeof value + \" value found, but a \" + type + \" is required\"\n                            }\n                        ];\n                    }\n                    if (type instanceof Array) {\n                        var unionErrors = [];\n                        for(var j = 0; j < type.length; j++){\n                            if (!(unionErrors = checkType(type[j], value)).length) {\n                                break;\n                            }\n                        }\n                        if (unionErrors.length) {\n                            return unionErrors;\n                        }\n                    } else if (typeof type == \"object\") {\n                        var priorErrors = errors;\n                        errors = [];\n                        checkProp(value, type, path);\n                        var theseErrors = errors;\n                        errors = priorErrors;\n                        return theseErrors;\n                    }\n                }\n                return [];\n            }\n            if (value === undefined) {\n                if (schema.required) {\n                    addError(\"is missing and it is required\");\n                }\n            } else {\n                errors = errors.concat(checkType(getType(schema), value));\n                if (schema.disallow && !checkType(schema.disallow, value).length) {\n                    addError(\" disallowed value was matched\");\n                }\n                if (value !== null) {\n                    if (value instanceof Array) {\n                        if (schema.items) {\n                            var itemsIsArray = schema.items instanceof Array;\n                            var propDef = schema.items;\n                            for(i = 0, l = value.length; i < l; i += 1){\n                                if (itemsIsArray) propDef = schema.items[i];\n                                if (options.coerce) value[i] = options.coerce(value[i], propDef);\n                                errors.concat(checkProp(value[i], propDef, path, i));\n                            }\n                        }\n                        if (schema.minItems && value.length < schema.minItems) {\n                            addError(\"There must be a minimum of \" + schema.minItems + \" in the array\");\n                        }\n                        if (schema.maxItems && value.length > schema.maxItems) {\n                            addError(\"There must be a maximum of \" + schema.maxItems + \" in the array\");\n                        }\n                    } else if (schema.properties || schema.additionalProperties) {\n                        errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));\n                    }\n                    if (schema.pattern && typeof value == \"string\" && !value.match(schema.pattern)) {\n                        addError(\"does not match the regex pattern \" + schema.pattern);\n                    }\n                    if (schema.maxLength && typeof value == \"string\" && value.length > schema.maxLength) {\n                        addError(\"may only be \" + schema.maxLength + \" characters long\");\n                    }\n                    if (schema.minLength && typeof value == \"string\" && value.length < schema.minLength) {\n                        addError(\"must be at least \" + schema.minLength + \" characters long\");\n                    }\n                    if (typeof schema.minimum !== \"undefined\" && typeof value == typeof schema.minimum && schema.minimum > value) {\n                        addError(\"must have a minimum value of \" + schema.minimum);\n                    }\n                    if (typeof schema.maximum !== \"undefined\" && typeof value == typeof schema.maximum && schema.maximum < value) {\n                        addError(\"must have a maximum value of \" + schema.maximum);\n                    }\n                    if (schema[\"enum\"]) {\n                        var enumer = schema[\"enum\"];\n                        l = enumer.length;\n                        var found;\n                        for(var j = 0; j < l; j++){\n                            if (enumer[j] === value) {\n                                found = 1;\n                                break;\n                            }\n                        }\n                        if (!found) {\n                            addError(\"does not have a value in the enumeration \" + enumer.join(\", \"));\n                        }\n                    }\n                    if (typeof schema.maxDecimal == \"number\" && value.toString().match(new RegExp(\"\\\\.[0-9]{\" + (schema.maxDecimal + 1) + \",}\"))) {\n                        addError(\"may only have \" + schema.maxDecimal + \" digits of decimal places\");\n                    }\n                }\n            }\n            return null;\n        }\n        // validate an object against a schema\n        function checkObj(instance, objTypeDef, path, additionalProp) {\n            if (typeof objTypeDef == \"object\") {\n                if (typeof instance != \"object\" || instance instanceof Array) {\n                    errors.push({\n                        property: path,\n                        message: \"an object is required\"\n                    });\n                }\n                for(var i in objTypeDef){\n                    if (objTypeDef.hasOwnProperty(i) && i != \"__proto__\" && i != \"constructor\") {\n                        var value = instance.hasOwnProperty(i) ? instance[i] : undefined;\n                        // skip _not_ specified properties\n                        if (value === undefined && options.existingOnly) continue;\n                        var propDef = objTypeDef[i];\n                        // set default\n                        if (value === undefined && propDef[\"default\"]) {\n                            value = instance[i] = propDef[\"default\"];\n                        }\n                        if (options.coerce && i in instance) {\n                            value = instance[i] = options.coerce(value, propDef);\n                        }\n                        checkProp(value, propDef, path, i);\n                    }\n                }\n            }\n            for(i in instance){\n                if (instance.hasOwnProperty(i) && !(i.charAt(0) == \"_\" && i.charAt(1) == \"_\") && objTypeDef && !objTypeDef[i] && additionalProp === false) {\n                    if (options.filter) {\n                        delete instance[i];\n                        continue;\n                    } else {\n                        errors.push({\n                            property: path,\n                            message: \"The property \" + i + \" is not defined in the schema and the schema does not allow additional properties\"\n                        });\n                    }\n                }\n                var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;\n                if (requires && !(requires in instance)) {\n                    errors.push({\n                        property: path,\n                        message: \"the presence of the property \" + i + \" requires that \" + requires + \" also be present\"\n                    });\n                }\n                value = instance[i];\n                if (additionalProp && (!(objTypeDef && typeof objTypeDef == \"object\") || !(i in objTypeDef))) {\n                    if (options.coerce) {\n                        value = instance[i] = options.coerce(value, additionalProp);\n                    }\n                    checkProp(value, additionalProp, path, i);\n                }\n                if (!_changing && value && value.$schema) {\n                    errors = errors.concat(checkProp(value, value.$schema, path, i));\n                }\n            }\n            return errors;\n        }\n        if (schema) {\n            checkProp(instance, schema, \"\", _changing || \"\");\n        }\n        if (!_changing && instance && instance.$schema) {\n            checkProp(instance, instance.$schema, \"\", \"\");\n        }\n        return {\n            valid: !errors.length,\n            errors: errors\n        };\n    };\n    exports.mustBeValid = function(result) {\n        //\tsummary:\n        //\t\tThis checks to ensure that the result is valid and will throw an appropriate error message if it is not\n        // result: the result returned from checkPropertyChange or validate\n        if (!result.valid) {\n            throw new TypeError(result.errors.map(function(error) {\n                return \"for property \" + error.property + \": \" + error.message;\n            }).join(\", \\n\"));\n        }\n    };\n    return exports;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/json-schema/lib/validate.js\n");

/***/ })

};
;