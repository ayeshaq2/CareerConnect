/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/textract";
exports.ids = ["vendor-chunks/textract"];
exports.modules = {

/***/ "(ssr)/./node_modules/textract/lib/extract.js":
/*!**********************************************!*\
  !*** ./node_modules/textract/lib/extract.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\"), path = __webpack_require__(/*! path */ \"path\"), XmlEntities = (__webpack_require__(/*! html-entities */ \"(ssr)/./node_modules/html-entities/index.js\").XmlEntities), util = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/textract/lib/util.js\"), extractorPath = path.join(__dirname, \"extractors\"), entities = new XmlEntities(), typeExtractors = {}, regexExtractors = [], failedExtractorTypes = {}, totalExtractors = 0, satisfiedExtractors = 0, hasInitialized = false, STRIP_ONLY_SINGLE_LINEBREAKS = /(^|[^\\n])\\n(?!\\n)/g, WHITELIST_PRESERVE_LINEBREAKS = /[^A-Za-z\\x80-\\xFF\\x24\\u20AC\\xA3\\xA5 0-9 \\u2015\\u2116\\u2018\\u2019\\u201C|\\u201D\\u2026 \\uFF0C \\u2013 \\u2014 \\u00C0-\\u1FFF \\u2C00-\\uD7FF \\uFB50–\\uFDFF \\uFE70–\\uFEFF \\uFF01-\\uFFE6 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~'-\\w\\n\\r]*/g // eslint-disable-line max-len\n, WHITELIST_STRIP_LINEBREAKS = /[^A-Za-z\\x80-\\xFF\\x24\\u20AC\\xA3\\xA5 0-9 \\u2015\\u2116\\u2018\\u2019\\u201C|\\u201D\\u2026 \\uFF0C \\u2013 \\u2014 \\u00C0-\\u1FFF \\u2C00-\\uD7FF \\uFB50–\\uFDFF \\uFE70–\\uFEFF \\uFF01-\\uFFE6 \\.,\\?\"\"!@#\\$%\\^&\\*\\(\\)-_=\\+;:<>\\/\\\\\\|\\}\\{\\[\\]`~'-\\w]*/g // eslint-disable-line max-len\n;\nfunction registerExtractor(extractor) {\n    if (extractor.types) {\n        extractor.types.forEach(function(type) {\n            if (typeof type === \"string\") {\n                type = type.toLowerCase();\n                typeExtractors[type] = extractor.extract;\n            } else {\n                if (type instanceof RegExp) {\n                    regexExtractors.push({\n                        reg: type,\n                        extractor: extractor.extract\n                    });\n                }\n            }\n        });\n    }\n}\nfunction registerFailedExtractor(extractor, failedMessage) {\n    if (extractor.types) {\n        extractor.types.forEach(function(type) {\n            failedExtractorTypes[type.toLowerCase()] = failedMessage;\n        });\n    }\n}\nfunction testExtractor(extractor, options) {\n    extractor.test(options, function(passedTest, failedMessage) {\n        satisfiedExtractors++;\n        if (passedTest) {\n            registerExtractor(extractor);\n        } else {\n            registerFailedExtractor(extractor, failedMessage);\n        }\n    });\n}\n// global, all file type, content cleansing\nfunction cleanseText(options, cb) {\n    return function(error, text) {\n        if (!error) {\n            // clean up text\n            text = util.replaceBadCharacters(text);\n            if (options.preserveLineBreaks || options.preserveOnlyMultipleLineBreaks) {\n                if (options.preserveOnlyMultipleLineBreaks) {\n                    text = text.replace(STRIP_ONLY_SINGLE_LINEBREAKS, \"$1 \").trim();\n                }\n                text = text.replace(WHITELIST_PRESERVE_LINEBREAKS, \" \");\n            } else {\n                text = text.replace(WHITELIST_STRIP_LINEBREAKS, \" \");\n            }\n            // multiple spaces, tabs, vertical tabs, non-breaking space]\n            text = text.replace(/ (?! )/g, \"\").replace(/[ \\t\\v\\u00A0]{2,}/g, \" \");\n            text = entities.decode(text);\n        }\n        cb(error, text);\n    };\n}\nfunction initializeExtractors(options) {\n    var extractors;\n    hasInitialized = true;\n    // discover available extractors\n    extractors = fs.readdirSync(extractorPath).map(function(item) {\n        var fullExtractorPath = path.join(extractorPath, item);\n        // get the extractor\n        // eslint-disable-next-line global-require\n        return __webpack_require__(\"(ssr)/./node_modules/textract/lib sync recursive\")(fullExtractorPath);\n    });\n    // perform any binary tests to ensure extractor is possible\n    // given execution environment\n    extractors.forEach(function(extractor) {\n        if (extractor.test) {\n            testExtractor(extractor, options);\n        } else {\n            satisfiedExtractors++;\n            registerExtractor(extractor);\n        }\n    });\n    // need to keep track of how many extractors we have in total\n    totalExtractors = extractors.length;\n}\nfunction findExtractor(type) {\n    var i, iLen = regexExtractors.length, extractor, regexExtractor;\n    type = type.toLowerCase();\n    if (typeExtractors[type]) {\n        extractor = typeExtractors[type];\n    } else {\n        for(i = 0; i < iLen; i++){\n            regexExtractor = regexExtractors[i];\n            if (type.match(regexExtractor.reg)) {\n                extractor = regexExtractor.extractor;\n            }\n        }\n    }\n    return extractor;\n}\nfunction extract(type, filePath, options, cb) {\n    var error, msg, theExtractor;\n    if (!hasInitialized) {\n        initializeExtractors(options);\n    }\n    // registration of extractors complete?\n    if (totalExtractors === satisfiedExtractors) {\n        theExtractor = findExtractor(type);\n        if (theExtractor) {\n            cb = cleanseText(options, cb);\n            theExtractor(filePath, options, cb);\n        } else {\n            // cannot extract this file type\n            msg = \"Error for type: [[ \" + type + \" ]], file: [[ \" + filePath + \" ]]\";\n            // update error message if type is supported but just not configured/installed properly\n            if (failedExtractorTypes[type]) {\n                msg += \", extractor for type exists, but failed to initialize.\" + \" Message: \" + failedExtractorTypes[type];\n            }\n            error = new Error(msg);\n            error.typeNotFound = true;\n            cb(error, null);\n        }\n    } else {\n        // async registration has not wrapped up\n        // try again later\n        setTimeout(function() {\n            extract(type, filePath, options, cb);\n        }, 100);\n    }\n}\nmodule.exports = extract;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/textract/lib/extract.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/textract/lib/index.js":
/*!********************************************!*\
  !*** ./node_modules/textract/lib/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var fs = __webpack_require__(/*! fs */ \"fs\"), path = __webpack_require__(/*! path */ \"path\"), mime = __webpack_require__(/*! mime */ \"(ssr)/./node_modules/mime/index.js\"), extract = __webpack_require__(/*! ./extract */ \"(ssr)/./node_modules/textract/lib/extract.js\"), os = __webpack_require__(/*! os */ \"os\"), got = __webpack_require__(/*! got */ \"(ssr)/./node_modules/got/index.js\"), tmpDir = os.tmpdir();\nfunction _genRandom() {\n    return Math.floor(Math.random() * 100000000000 + 1);\n}\nfunction _extractWithType(type, filePath, options, cb) {\n    fs.exists(filePath, function(exists) {\n        if (exists) {\n            extract(type, filePath, options, cb);\n        } else {\n            cb(new Error(\"File at path [[ \" + filePath + \" ]] does not exist.\"), null);\n        }\n    });\n}\nfunction _returnArgsError(_args) {\n    var args = Array.prototype.slice.call(_args), callback;\n    args.forEach(function(parm) {\n        if (parm && typeof parm === \"function\") {\n            callback = parm;\n        }\n    });\n    if (callback) {\n        callback(new Error(\"Incorrect parameters passed to textract.\"), null);\n    } else {\n        // eslint-disable-next-line no-console\n        console.error(\"textract could not find a callback function to execute.\");\n    }\n}\nfunction _writeBufferToDisk(buff, cb) {\n    var fullPath = path.join(tmpDir, \"textract_file_\" + _genRandom());\n    fs.open(fullPath, \"w\", function(err, fd) {\n        if (err) {\n            throw new Error(\"error opening temp file: \" + err);\n        } else {\n            fs.write(fd, buff, 0, buff.length, null, function(err2) {\n                if (err2) {\n                    throw new Error(\"error writing temp file: \" + err2);\n                } else {\n                    fs.close(fd, function() {\n                        cb(fullPath);\n                    });\n                }\n            });\n        }\n    });\n}\nfunction fromFileWithMimeAndPath(type, filePath, options, cb) {\n    var called = false;\n    if (typeof type === \"string\" && typeof filePath === \"string\") {\n        if (typeof cb === \"function\" && typeof options === \"object\") {\n            // (mimeType, filePath, options, callback)\n            _extractWithType(type, filePath, options, cb);\n            called = true;\n        } else if (typeof options === \"function\" && cb === undefined) {\n            // (mimeType, filePath, callback)\n            _extractWithType(type, filePath, {}, options);\n            called = true;\n        }\n    }\n    if (!called) {\n        _returnArgsError(arguments);\n    }\n}\nfunction fromFileWithPath(filePath, options, cb) {\n    var type;\n    if (typeof filePath === \"string\" && (typeof options === \"function\" || typeof cb === \"function\")) {\n        type = options && options.typeOverride || mime.getType(filePath);\n        fromFileWithMimeAndPath(type, filePath, options, cb);\n    } else {\n        _returnArgsError(arguments);\n    }\n}\n// eslint-disable-next-line no-unused-vars\nfunction fromBufferWithMime(type, bufferContent, options, cb, withPath) {\n    if (typeof type === \"string\" && bufferContent && bufferContent instanceof Buffer && (typeof options === \"function\" || typeof cb === \"function\")) {\n        _writeBufferToDisk(bufferContent, function(newPath) {\n            fromFileWithMimeAndPath(type, newPath, options, cb);\n        });\n    } else {\n        _returnArgsError(arguments);\n    }\n}\nfunction fromBufferWithName(filePath, bufferContent, options, cb) {\n    var type;\n    if (typeof filePath === \"string\") {\n        type = mime.getType(filePath);\n        fromBufferWithMime(type, bufferContent, options, cb, true);\n    } else {\n        _returnArgsError(arguments);\n    }\n}\nfunction fromUrl(url, options, cb) {\n    var urlNoQueryParams, extname, filePath, fullFilePath, file, href, callbackCalled;\n    // allow url to be either a string or to be a\n    // Node URL Object: https://nodejs.org/api/url.html\n    href = typeof url === \"string\" ? url : url.href;\n    if (href) {\n        options = options || {};\n        urlNoQueryParams = href.split(\"?\")[0];\n        extname = path.extname(urlNoQueryParams);\n        filePath = _genRandom() + extname;\n        fullFilePath = path.join(tmpDir, filePath);\n        file = fs.createWriteStream(fullFilePath);\n        file.on(\"finish\", function() {\n            if (!callbackCalled) {\n                fromFileWithPath(fullFilePath, options, cb);\n            }\n        });\n        got.stream(url).on(\"response\", function(response) {\n            // allows for overriding by the developer or automatically\n            // populating based on server response.\n            if (!options.typeOverride) {\n                options.typeOverride = response.headers[\"content-type\"].split(/;/)[0];\n            }\n        }).on(\"error\", function(error) {\n            var _cb = typeof options === \"function\" ? options : cb;\n            callbackCalled = true;\n            _cb(error);\n        }).pipe(file);\n    } else {\n        _returnArgsError(arguments);\n    }\n}\nmodule.exports = {\n    fromFileWithPath: fromFileWithPath,\n    fromFileWithMimeAndPath: fromFileWithMimeAndPath,\n    fromBufferWithName: fromBufferWithName,\n    fromBufferWithMime: fromBufferWithMime,\n    fromUrl: fromUrl\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/textract/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/textract/lib/util.js":
/*!*******************************************!*\
  !*** ./node_modules/textract/lib/util.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var exec = (__webpack_require__(/*! child_process */ \"child_process\").exec), path = __webpack_require__(/*! path */ \"path\"), fs = __webpack_require__(/*! fs */ \"fs\"), os = __webpack_require__(/*! os */ \"os\"), outDir = path.join(os.tmpdir(), \"textract\"), replacements = [\n    [\n        /[\\u201C|\\u201D|]|â€œ|â€/g,\n        '\"'\n    ],\n    [\n        /[\\u2018|\\u2019]|â€™|â€˜]/g,\n        \"'\"\n    ],\n    [\n        /â€¦/g,\n        \"…\"\n    ],\n    [\n        /â€“|â€”/g,\n        \"–\"\n    ] // long hyphen\n], rLen = replacements.length;\n// Up front creation of tmp dir\nif (!fs.existsSync(outDir)) {\n    fs.mkdirSync(outDir);\n}\n// replace nasty quotes with simple ones\nfunction replaceBadCharacters(text) {\n    var i, repl;\n    for(i = 0; i < rLen; i++){\n        repl = replacements[i];\n        text = text.replace(repl[0], repl[1]);\n    }\n    return text;\n}\nfunction yauzlError(err, cb) {\n    var msg = err.message;\n    if (msg === \"end of central directory record signature not found\") {\n        msg = \"File not correctly recognized as zip file, \" + msg;\n    }\n    cb(new Error(msg), null);\n}\nfunction createExecOptions(type, options) {\n    var execOptions = {};\n    if (options[type] && options[type].exec) {\n        execOptions = options[type].exec;\n    } else {\n        if (options.exec) {\n            execOptions = options.exec;\n        }\n    }\n    return execOptions;\n}\nfunction unzipCheck(type, cb) {\n    exec(\"unzip\", function(error /* , stdout, stderr */ ) {\n        if (error) {\n            // eslint-disable-next-line no-console\n            console.error(\"textract: 'unzip' does not appear to be installed, \" + \"so textract will be unable to extract \" + type + \".\");\n        }\n        cb(error === null);\n    });\n}\nfunction getTextFromZipFile(zipfile, entry, cb) {\n    zipfile.openReadStream(entry, function(err, readStream) {\n        var text = \"\", error = \"\";\n        if (err) {\n            cb(err, null);\n            return;\n        }\n        readStream.on(\"data\", function(chunk) {\n            text += chunk;\n        });\n        readStream.on(\"end\", function() {\n            if (error.length > 0) {\n                cb(error, null);\n            } else {\n                cb(null, text);\n            }\n        });\n        readStream.on(\"error\", function(_err) {\n            error += _err;\n        });\n    });\n}\n/**\n * 1) builds an exec command using provided `genCommand` callback\n * 2) runs that command against an input file path\n *   resulting in an output file\n * 3) reads that output file in\n * 4) cleans the output file up\n * 5) executes a callback with the contents of the file\n *\n * @param {string} label Name for the extractor, e.g. `Tesseract`\n * @param {string} filePath path to file to be extractor\n * @param {object} options extractor options as provided\n *   via user configuration\n * @param {object} execOptions execution options passed to\n *   `exec` commmand as provided via user configuration\n * @param {function} genCommand function used to generate\n *   the command to be executed\n * @param {string} cb callback that is passed error/text\n *\n */ function runExecIntoFile(label, filePath, options, execOptions, genCommand, cb) {\n    // escape the file paths\n    var fileTempOutPath = path.join(outDir, path.basename(filePath, path.extname(filePath))), escapedFilePath = filePath.replace(/\\s/g, \"\\\\ \"), escapedFileTempOutPath = fileTempOutPath.replace(/\\s/g, \"\\\\ \"), cmd = genCommand(options, escapedFilePath, escapedFileTempOutPath);\n    exec(cmd, execOptions, function(error /* , stdout, stderr */ ) {\n        if (error !== null) {\n            error = new Error(\"Error extracting [[ \" + path.basename(filePath) + \" ]], exec error: \" + error.message);\n            cb(error, null);\n            return;\n        }\n        fs.exists(fileTempOutPath + \".txt\", function(exists) {\n            if (exists) {\n                fs.readFile(fileTempOutPath + \".txt\", \"utf8\", function(error2, text) {\n                    if (error2) {\n                        error2 = new Error(\"Error reading\" + label + \" output at [[ \" + fileTempOutPath + \" ]], error: \" + error2.message);\n                        cb(error2, null);\n                    } else {\n                        fs.unlink(fileTempOutPath + \".txt\", function(error3) {\n                            if (error3) {\n                                error3 = new Error(\"Error, \" + label + \" , cleaning up temp file [[ \" + fileTempOutPath + \" ]], error: \" + error3.message);\n                                cb(error3, null);\n                            } else {\n                                cb(null, text.toString());\n                            }\n                        });\n                    }\n                });\n            } else {\n                error = new Error(\"Error reading \" + label + \" output at [[ \" + fileTempOutPath + \" ]], file does not exist\");\n                cb(error, null);\n            }\n        });\n    });\n}\nmodule.exports = {\n    createExecOptions: createExecOptions,\n    unzipCheck: unzipCheck,\n    getTextFromZipFile: getTextFromZipFile,\n    yauzlError: yauzlError,\n    runExecIntoFile: runExecIntoFile,\n    replaceBadCharacters: replaceBadCharacters\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/textract/lib/util.js\n");

/***/ })

};
;