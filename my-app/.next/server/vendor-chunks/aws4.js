/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/aws4";
exports.ids = ["vendor-chunks/aws4"];
exports.modules = {

/***/ "(ssr)/./node_modules/aws4/aws4.js":
/*!***********************************!*\
  !*** ./node_modules/aws4/aws4.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var aws4 = exports, url = __webpack_require__(/*! url */ \"url\"), querystring = __webpack_require__(/*! querystring */ \"querystring\"), crypto = __webpack_require__(/*! crypto */ \"crypto\"), lru = __webpack_require__(/*! ./lru */ \"(ssr)/./node_modules/aws4/lru.js\"), credentialsCache = lru(1000);\n// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html\nfunction hmac(key, string, encoding) {\n    return crypto.createHmac(\"sha256\", key).update(string, \"utf8\").digest(encoding);\n}\nfunction hash(string, encoding) {\n    return crypto.createHash(\"sha256\").update(string, \"utf8\").digest(encoding);\n}\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n    return urlEncodedString.replace(/[!'()*]/g, function(c) {\n        return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n    });\n}\nfunction encodeRfc3986Full(str) {\n    return encodeRfc3986(encodeURIComponent(str));\n}\n// A bit of a combination of:\n// https://github.com/aws/aws-sdk-java-v2/blob/dc695de6ab49ad03934e1b02e7263abbd2354be0/core/auth/src/main/java/software/amazon/awssdk/auth/signer/internal/AbstractAws4Signer.java#L59\n// https://github.com/aws/aws-sdk-js/blob/18cb7e5b463b46239f9fdd4a65e2ff8c81831e8f/lib/signers/v4.js#L191-L199\n// https://github.com/mhart/aws4fetch/blob/b3aed16b6f17384cf36ea33bcba3c1e9f3bdfefd/src/main.js#L25-L34\nvar HEADERS_TO_IGNORE = {\n    \"authorization\": true,\n    \"connection\": true,\n    \"x-amzn-trace-id\": true,\n    \"user-agent\": true,\n    \"expect\": true,\n    \"presigned-expires\": true,\n    \"range\": true\n};\n// request: { path | body, [host], [method], [headers], [service], [region] }\n// credentials: { accessKeyId, secretAccessKey, [sessionToken] }\nfunction RequestSigner(request, credentials) {\n    if (typeof request === \"string\") request = url.parse(request);\n    var headers = request.headers = request.headers || {}, hostParts = (!this.service || !this.region) && this.matchHost(request.hostname || request.host || headers.Host || headers.host);\n    this.request = request;\n    this.credentials = credentials || this.defaultCredentials();\n    this.service = request.service || hostParts[0] || \"\";\n    this.region = request.region || hostParts[1] || \"us-east-1\";\n    // SES uses a different domain from the service name\n    if (this.service === \"email\") this.service = \"ses\";\n    if (!request.method && request.body) request.method = \"POST\";\n    if (!headers.Host && !headers.host) {\n        headers.Host = request.hostname || request.host || this.createHost();\n        // If a port is specified explicitly, use it as is\n        if (request.port) headers.Host += \":\" + request.port;\n    }\n    if (!request.hostname && !request.host) request.hostname = headers.Host || headers.host;\n    this.isCodeCommitGit = this.service === \"codecommit\" && request.method === \"GIT\";\n    this.extraHeadersToIgnore = request.extraHeadersToIgnore || Object.create(null);\n    this.extraHeadersToInclude = request.extraHeadersToInclude || Object.create(null);\n}\nRequestSigner.prototype.matchHost = function(host) {\n    var match = (host || \"\").match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(\\.cn)?$/);\n    var hostParts = (match || []).slice(1, 3);\n    // ES's hostParts are sometimes the other way round, if the value that is expected\n    // to be region equals ‘es’ switch them back\n    // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com\n    if (hostParts[1] === \"es\" || hostParts[1] === \"aoss\") hostParts = hostParts.reverse();\n    if (hostParts[1] == \"s3\") {\n        hostParts[0] = \"s3\";\n        hostParts[1] = \"us-east-1\";\n    } else {\n        for(var i = 0; i < 2; i++){\n            if (/^s3-/.test(hostParts[i])) {\n                hostParts[1] = hostParts[i].slice(3);\n                hostParts[0] = \"s3\";\n                break;\n            }\n        }\n    }\n    return hostParts;\n};\n// http://docs.aws.amazon.com/general/latest/gr/rande.html\nRequestSigner.prototype.isSingleRegion = function() {\n    // Special case for S3 and SimpleDB in us-east-1\n    if ([\n        \"s3\",\n        \"sdb\"\n    ].indexOf(this.service) >= 0 && this.region === \"us-east-1\") return true;\n    return [\n        \"cloudfront\",\n        \"ls\",\n        \"route53\",\n        \"iam\",\n        \"importexport\",\n        \"sts\"\n    ].indexOf(this.service) >= 0;\n};\nRequestSigner.prototype.createHost = function() {\n    var region = this.isSingleRegion() ? \"\" : \".\" + this.region, subdomain = this.service === \"ses\" ? \"email\" : this.service;\n    return subdomain + region + \".amazonaws.com\";\n};\nRequestSigner.prototype.prepareRequest = function() {\n    this.parsePath();\n    var request = this.request, headers = request.headers, query;\n    if (request.signQuery) {\n        this.parsedPath.query = query = this.parsedPath.query || {};\n        if (this.credentials.sessionToken) query[\"X-Amz-Security-Token\"] = this.credentials.sessionToken;\n        if (this.service === \"s3\" && !query[\"X-Amz-Expires\"]) query[\"X-Amz-Expires\"] = 86400;\n        if (query[\"X-Amz-Date\"]) this.datetime = query[\"X-Amz-Date\"];\n        else query[\"X-Amz-Date\"] = this.getDateTime();\n        query[\"X-Amz-Algorithm\"] = \"AWS4-HMAC-SHA256\";\n        query[\"X-Amz-Credential\"] = this.credentials.accessKeyId + \"/\" + this.credentialString();\n        query[\"X-Amz-SignedHeaders\"] = this.signedHeaders();\n    } else {\n        if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {\n            if (request.body && !headers[\"Content-Type\"] && !headers[\"content-type\"]) headers[\"Content-Type\"] = \"application/x-www-form-urlencoded; charset=utf-8\";\n            if (request.body && !headers[\"Content-Length\"] && !headers[\"content-length\"]) headers[\"Content-Length\"] = Buffer.byteLength(request.body);\n            if (this.credentials.sessionToken && !headers[\"X-Amz-Security-Token\"] && !headers[\"x-amz-security-token\"]) headers[\"X-Amz-Security-Token\"] = this.credentials.sessionToken;\n            if (this.service === \"s3\" && !headers[\"X-Amz-Content-Sha256\"] && !headers[\"x-amz-content-sha256\"]) headers[\"X-Amz-Content-Sha256\"] = hash(this.request.body || \"\", \"hex\");\n            if (headers[\"X-Amz-Date\"] || headers[\"x-amz-date\"]) this.datetime = headers[\"X-Amz-Date\"] || headers[\"x-amz-date\"];\n            else headers[\"X-Amz-Date\"] = this.getDateTime();\n        }\n        delete headers.Authorization;\n        delete headers.authorization;\n    }\n};\nRequestSigner.prototype.sign = function() {\n    if (!this.parsedPath) this.prepareRequest();\n    if (this.request.signQuery) {\n        this.parsedPath.query[\"X-Amz-Signature\"] = this.signature();\n    } else {\n        this.request.headers.Authorization = this.authHeader();\n    }\n    this.request.path = this.formatPath();\n    return this.request;\n};\nRequestSigner.prototype.getDateTime = function() {\n    if (!this.datetime) {\n        var headers = this.request.headers, date = new Date(headers.Date || headers.date || new Date);\n        this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, \"\");\n        // Remove the trailing 'Z' on the timestamp string for CodeCommit git access\n        if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1);\n    }\n    return this.datetime;\n};\nRequestSigner.prototype.getDate = function() {\n    return this.getDateTime().substr(0, 8);\n};\nRequestSigner.prototype.authHeader = function() {\n    return [\n        \"AWS4-HMAC-SHA256 Credential=\" + this.credentials.accessKeyId + \"/\" + this.credentialString(),\n        \"SignedHeaders=\" + this.signedHeaders(),\n        \"Signature=\" + this.signature()\n    ].join(\", \");\n};\nRequestSigner.prototype.signature = function() {\n    var date = this.getDate(), cacheKey = [\n        this.credentials.secretAccessKey,\n        date,\n        this.region,\n        this.service\n    ].join(), kDate, kRegion, kService, kCredentials = credentialsCache.get(cacheKey);\n    if (!kCredentials) {\n        kDate = hmac(\"AWS4\" + this.credentials.secretAccessKey, date);\n        kRegion = hmac(kDate, this.region);\n        kService = hmac(kRegion, this.service);\n        kCredentials = hmac(kService, \"aws4_request\");\n        credentialsCache.set(cacheKey, kCredentials);\n    }\n    return hmac(kCredentials, this.stringToSign(), \"hex\");\n};\nRequestSigner.prototype.stringToSign = function() {\n    return [\n        \"AWS4-HMAC-SHA256\",\n        this.getDateTime(),\n        this.credentialString(),\n        hash(this.canonicalString(), \"hex\")\n    ].join(\"\\n\");\n};\nRequestSigner.prototype.canonicalString = function() {\n    if (!this.parsedPath) this.prepareRequest();\n    var pathStr = this.parsedPath.path, query = this.parsedPath.query, headers = this.request.headers, queryStr = \"\", normalizePath = this.service !== \"s3\", decodePath = this.service === \"s3\" || this.request.doNotEncodePath, decodeSlashesInPath = this.service === \"s3\", firstValOnly = this.service === \"s3\", bodyHash;\n    if (this.service === \"s3\" && this.request.signQuery) {\n        bodyHash = \"UNSIGNED-PAYLOAD\";\n    } else if (this.isCodeCommitGit) {\n        bodyHash = \"\";\n    } else {\n        bodyHash = headers[\"X-Amz-Content-Sha256\"] || headers[\"x-amz-content-sha256\"] || hash(this.request.body || \"\", \"hex\");\n    }\n    if (query) {\n        var reducedQuery = Object.keys(query).reduce(function(obj, key) {\n            if (!key) return obj;\n            obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] : firstValOnly ? query[key][0] : query[key];\n            return obj;\n        }, {});\n        var encodedQueryPieces = [];\n        Object.keys(reducedQuery).sort().forEach(function(key) {\n            if (!Array.isArray(reducedQuery[key])) {\n                encodedQueryPieces.push(key + \"=\" + encodeRfc3986Full(reducedQuery[key]));\n            } else {\n                reducedQuery[key].map(encodeRfc3986Full).sort().forEach(function(val) {\n                    encodedQueryPieces.push(key + \"=\" + val);\n                });\n            }\n        });\n        queryStr = encodedQueryPieces.join(\"&\");\n    }\n    if (pathStr !== \"/\") {\n        if (normalizePath) pathStr = pathStr.replace(/\\/{2,}/g, \"/\");\n        pathStr = pathStr.split(\"/\").reduce(function(path, piece) {\n            if (normalizePath && piece === \"..\") {\n                path.pop();\n            } else if (!normalizePath || piece !== \".\") {\n                if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, \" \"));\n                path.push(encodeRfc3986Full(piece));\n            }\n            return path;\n        }, []).join(\"/\");\n        if (pathStr[0] !== \"/\") pathStr = \"/\" + pathStr;\n        if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, \"/\");\n    }\n    return [\n        this.request.method || \"GET\",\n        pathStr,\n        queryStr,\n        this.canonicalHeaders() + \"\\n\",\n        this.signedHeaders(),\n        bodyHash\n    ].join(\"\\n\");\n};\nRequestSigner.prototype.canonicalHeaders = function() {\n    var headers = this.request.headers;\n    function trimAll(header) {\n        return header.toString().trim().replace(/\\s+/g, \" \");\n    }\n    return Object.keys(headers).filter(function(key) {\n        return HEADERS_TO_IGNORE[key.toLowerCase()] == null;\n    }).sort(function(a, b) {\n        return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n    }).map(function(key) {\n        return key.toLowerCase() + \":\" + trimAll(headers[key]);\n    }).join(\"\\n\");\n};\nRequestSigner.prototype.signedHeaders = function() {\n    var extraHeadersToInclude = this.extraHeadersToInclude, extraHeadersToIgnore = this.extraHeadersToIgnore;\n    return Object.keys(this.request.headers).map(function(key) {\n        return key.toLowerCase();\n    }).filter(function(key) {\n        return extraHeadersToInclude[key] || HEADERS_TO_IGNORE[key] == null && !extraHeadersToIgnore[key];\n    }).sort().join(\";\");\n};\nRequestSigner.prototype.credentialString = function() {\n    return [\n        this.getDate(),\n        this.region,\n        this.service,\n        \"aws4_request\"\n    ].join(\"/\");\n};\nRequestSigner.prototype.defaultCredentials = function() {\n    var env = process.env;\n    return {\n        accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,\n        secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,\n        sessionToken: env.AWS_SESSION_TOKEN\n    };\n};\nRequestSigner.prototype.parsePath = function() {\n    var path = this.request.path || \"/\";\n    // S3 doesn't always encode characters > 127 correctly and\n    // all services don't encode characters > 255 correctly\n    // So if there are non-reserved chars (and it's not already all % encoded), just encode them all\n    if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*'()#%]/.test(path)) {\n        path = encodeURI(decodeURI(path));\n    }\n    var queryIx = path.indexOf(\"?\"), query = null;\n    if (queryIx >= 0) {\n        query = querystring.parse(path.slice(queryIx + 1));\n        path = path.slice(0, queryIx);\n    }\n    this.parsedPath = {\n        path: path,\n        query: query\n    };\n};\nRequestSigner.prototype.formatPath = function() {\n    var path = this.parsedPath.path, query = this.parsedPath.query;\n    if (!query) return path;\n    // Services don't support empty query string keys\n    if (query[\"\"] != null) delete query[\"\"];\n    return path + \"?\" + encodeRfc3986(querystring.stringify(query));\n};\naws4.RequestSigner = RequestSigner;\naws4.sign = function(request, credentials) {\n    return new RequestSigner(request, credentials).sign();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws4/aws4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/aws4/lru.js":
/*!**********************************!*\
  !*** ./node_modules/aws4/lru.js ***!
  \**********************************/
/***/ ((module) => {

eval("module.exports = function(size) {\n    return new LruCache(size);\n};\nfunction LruCache(size) {\n    this.capacity = size | 0;\n    this.map = Object.create(null);\n    this.list = new DoublyLinkedList();\n}\nLruCache.prototype.get = function(key) {\n    var node = this.map[key];\n    if (node == null) return undefined;\n    this.used(node);\n    return node.val;\n};\nLruCache.prototype.set = function(key, val) {\n    var node = this.map[key];\n    if (node != null) {\n        node.val = val;\n    } else {\n        if (!this.capacity) this.prune();\n        if (!this.capacity) return false;\n        node = new DoublyLinkedNode(key, val);\n        this.map[key] = node;\n        this.capacity--;\n    }\n    this.used(node);\n    return true;\n};\nLruCache.prototype.used = function(node) {\n    this.list.moveToFront(node);\n};\nLruCache.prototype.prune = function() {\n    var node = this.list.pop();\n    if (node != null) {\n        delete this.map[node.key];\n        this.capacity++;\n    }\n};\nfunction DoublyLinkedList() {\n    this.firstNode = null;\n    this.lastNode = null;\n}\nDoublyLinkedList.prototype.moveToFront = function(node) {\n    if (this.firstNode == node) return;\n    this.remove(node);\n    if (this.firstNode == null) {\n        this.firstNode = node;\n        this.lastNode = node;\n        node.prev = null;\n        node.next = null;\n    } else {\n        node.prev = null;\n        node.next = this.firstNode;\n        node.next.prev = node;\n        this.firstNode = node;\n    }\n};\nDoublyLinkedList.prototype.pop = function() {\n    var lastNode = this.lastNode;\n    if (lastNode != null) {\n        this.remove(lastNode);\n    }\n    return lastNode;\n};\nDoublyLinkedList.prototype.remove = function(node) {\n    if (this.firstNode == node) {\n        this.firstNode = node.next;\n    } else if (node.prev != null) {\n        node.prev.next = node.next;\n    }\n    if (this.lastNode == node) {\n        this.lastNode = node.prev;\n    } else if (node.next != null) {\n        node.next.prev = node.prev;\n    }\n};\nfunction DoublyLinkedNode(key, val) {\n    this.key = key;\n    this.val = val;\n    this.prev = null;\n    this.next = null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvYXdzNC9scnUuanM/NzYxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHNpemUpIHtcbiAgcmV0dXJuIG5ldyBMcnVDYWNoZShzaXplKVxufVxuXG5mdW5jdGlvbiBMcnVDYWNoZShzaXplKSB7XG4gIHRoaXMuY2FwYWNpdHkgPSBzaXplIHwgMFxuICB0aGlzLm1hcCA9IE9iamVjdC5jcmVhdGUobnVsbClcbiAgdGhpcy5saXN0ID0gbmV3IERvdWJseUxpbmtlZExpc3QoKVxufVxuXG5McnVDYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5KSB7XG4gIHZhciBub2RlID0gdGhpcy5tYXBba2V5XVxuICBpZiAobm9kZSA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkXG4gIHRoaXMudXNlZChub2RlKVxuICByZXR1cm4gbm9kZS52YWxcbn1cblxuTHJ1Q2FjaGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsKSB7XG4gIHZhciBub2RlID0gdGhpcy5tYXBba2V5XVxuICBpZiAobm9kZSAhPSBudWxsKSB7XG4gICAgbm9kZS52YWwgPSB2YWxcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXRoaXMuY2FwYWNpdHkpIHRoaXMucHJ1bmUoKVxuICAgIGlmICghdGhpcy5jYXBhY2l0eSkgcmV0dXJuIGZhbHNlXG4gICAgbm9kZSA9IG5ldyBEb3VibHlMaW5rZWROb2RlKGtleSwgdmFsKVxuICAgIHRoaXMubWFwW2tleV0gPSBub2RlXG4gICAgdGhpcy5jYXBhY2l0eS0tXG4gIH1cbiAgdGhpcy51c2VkKG5vZGUpXG4gIHJldHVybiB0cnVlXG59XG5cbkxydUNhY2hlLnByb3RvdHlwZS51c2VkID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLmxpc3QubW92ZVRvRnJvbnQobm9kZSlcbn1cblxuTHJ1Q2FjaGUucHJvdG90eXBlLnBydW5lID0gZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlID0gdGhpcy5saXN0LnBvcCgpXG4gIGlmIChub2RlICE9IG51bGwpIHtcbiAgICBkZWxldGUgdGhpcy5tYXBbbm9kZS5rZXldXG4gICAgdGhpcy5jYXBhY2l0eSsrXG4gIH1cbn1cblxuXG5mdW5jdGlvbiBEb3VibHlMaW5rZWRMaXN0KCkge1xuICB0aGlzLmZpcnN0Tm9kZSA9IG51bGxcbiAgdGhpcy5sYXN0Tm9kZSA9IG51bGxcbn1cblxuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUubW92ZVRvRnJvbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICh0aGlzLmZpcnN0Tm9kZSA9PSBub2RlKSByZXR1cm5cblxuICB0aGlzLnJlbW92ZShub2RlKVxuXG4gIGlmICh0aGlzLmZpcnN0Tm9kZSA9PSBudWxsKSB7XG4gICAgdGhpcy5maXJzdE5vZGUgPSBub2RlXG4gICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGVcbiAgICBub2RlLnByZXYgPSBudWxsXG4gICAgbm9kZS5uZXh0ID0gbnVsbFxuICB9IGVsc2Uge1xuICAgIG5vZGUucHJldiA9IG51bGxcbiAgICBub2RlLm5leHQgPSB0aGlzLmZpcnN0Tm9kZVxuICAgIG5vZGUubmV4dC5wcmV2ID0gbm9kZVxuICAgIHRoaXMuZmlyc3ROb2RlID0gbm9kZVxuICB9XG59XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbGFzdE5vZGUgPSB0aGlzLmxhc3ROb2RlXG4gIGlmIChsYXN0Tm9kZSAhPSBudWxsKSB7XG4gICAgdGhpcy5yZW1vdmUobGFzdE5vZGUpXG4gIH1cbiAgcmV0dXJuIGxhc3ROb2RlXG59XG5cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKHRoaXMuZmlyc3ROb2RlID09IG5vZGUpIHtcbiAgICB0aGlzLmZpcnN0Tm9kZSA9IG5vZGUubmV4dFxuICB9IGVsc2UgaWYgKG5vZGUucHJldiAhPSBudWxsKSB7XG4gICAgbm9kZS5wcmV2Lm5leHQgPSBub2RlLm5leHRcbiAgfVxuICBpZiAodGhpcy5sYXN0Tm9kZSA9PSBub2RlKSB7XG4gICAgdGhpcy5sYXN0Tm9kZSA9IG5vZGUucHJldlxuICB9IGVsc2UgaWYgKG5vZGUubmV4dCAhPSBudWxsKSB7XG4gICAgbm9kZS5uZXh0LnByZXYgPSBub2RlLnByZXZcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIERvdWJseUxpbmtlZE5vZGUoa2V5LCB2YWwpIHtcbiAgdGhpcy5rZXkgPSBrZXlcbiAgdGhpcy52YWwgPSB2YWxcbiAgdGhpcy5wcmV2ID0gbnVsbFxuICB0aGlzLm5leHQgPSBudWxsXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInNpemUiLCJMcnVDYWNoZSIsImNhcGFjaXR5IiwibWFwIiwiT2JqZWN0IiwiY3JlYXRlIiwibGlzdCIsIkRvdWJseUxpbmtlZExpc3QiLCJwcm90b3R5cGUiLCJnZXQiLCJrZXkiLCJub2RlIiwidW5kZWZpbmVkIiwidXNlZCIsInZhbCIsInNldCIsInBydW5lIiwiRG91Ymx5TGlua2VkTm9kZSIsIm1vdmVUb0Zyb250IiwicG9wIiwiZmlyc3ROb2RlIiwibGFzdE5vZGUiLCJyZW1vdmUiLCJwcmV2IiwibmV4dCJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxJQUFJO0lBQzVCLE9BQU8sSUFBSUMsU0FBU0Q7QUFDdEI7QUFFQSxTQUFTQyxTQUFTRCxJQUFJO0lBQ3BCLElBQUksQ0FBQ0UsUUFBUSxHQUFHRixPQUFPO0lBQ3ZCLElBQUksQ0FBQ0csR0FBRyxHQUFHQyxPQUFPQyxNQUFNLENBQUM7SUFDekIsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSUM7QUFDbEI7QUFFQU4sU0FBU08sU0FBUyxDQUFDQyxHQUFHLEdBQUcsU0FBU0MsR0FBRztJQUNuQyxJQUFJQyxPQUFPLElBQUksQ0FBQ1IsR0FBRyxDQUFDTyxJQUFJO0lBQ3hCLElBQUlDLFFBQVEsTUFBTSxPQUFPQztJ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\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/aws4/lru.js\n");

/***/ })

};
;