/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/http-signature";
exports.ids = ["vendor-chunks/http-signature"];
exports.modules = {

/***/ "(ssr)/./node_modules/http-signature/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/http-signature/lib/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nvar parser = __webpack_require__(/*! ./parser */ \"(ssr)/./node_modules/http-signature/lib/parser.js\");\nvar signer = __webpack_require__(/*! ./signer */ \"(ssr)/./node_modules/http-signature/lib/signer.js\");\nvar verify = __webpack_require__(/*! ./verify */ \"(ssr)/./node_modules/http-signature/lib/verify.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/http-signature/lib/utils.js\");\n///--- API\nmodule.exports = {\n    parse: parser.parseRequest,\n    parseRequest: parser.parseRequest,\n    sign: signer.signRequest,\n    signRequest: signer.signRequest,\n    createSigner: signer.createSigner,\n    isSigner: signer.isSigner,\n    sshKeyToPEM: utils.sshKeyToPEM,\n    sshKeyFingerprint: utils.fingerprint,\n    pemToRsaSSHKey: utils.pemToRsaSSHKey,\n    verify: verify.verifySignature,\n    verifySignature: verify.verifySignature,\n    verifyHMAC: verify.verifyHMAC\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLDhCQUE4QjtBQUU5QixJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUNyQixJQUFJRyxRQUFRSCxtQkFBT0EsQ0FBQztBQUlwQixVQUFVO0FBRVZJLE9BQU9DLE9BQU8sR0FBRztJQUVmQyxPQUFPUCxPQUFPUSxZQUFZO0lBQzFCQSxjQUFjUixPQUFPUSxZQUFZO0lBRWpDQyxNQUFNUCxPQUFPUSxXQUFXO0lBQ3hCQSxhQUFhUixPQUFPUSxXQUFXO0lBQy9CQyxjQUFjVCxPQUFPUyxZQUFZO0lBQ2pDQyxVQUFVVixPQUFPVSxRQUFRO0lBRXpCQyxhQUFhVCxNQUFNUyxXQUFXO0lBQzlCQyxtQkFBbUJWLE1BQU1XLFdBQVc7SUFDcENDLGdCQUFnQlosTUFBTVksY0FBYztJQUVwQ2IsUUFBUUEsT0FBT2MsZUFBZTtJQUM5QkEsaUJBQWlCZCxPQUFPYyxlQUFlO0lBQ3ZDQyxZQUFZZixPQUFPZSxVQUFVO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktYXBwLy4vbm9kZV9tb2R1bGVzL2h0dHAtc2lnbmF0dXJlL2xpYi9pbmRleC5qcz82MmJkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1IEpveWVudCwgSW5jLlxuXG52YXIgcGFyc2VyID0gcmVxdWlyZSgnLi9wYXJzZXInKTtcbnZhciBzaWduZXIgPSByZXF1aXJlKCcuL3NpZ25lcicpO1xudmFyIHZlcmlmeSA9IHJlcXVpcmUoJy4vdmVyaWZ5Jyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cblxuXG4vLy8tLS0gQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIHBhcnNlOiBwYXJzZXIucGFyc2VSZXF1ZXN0LFxuICBwYXJzZVJlcXVlc3Q6IHBhcnNlci5wYXJzZVJlcXVlc3QsXG5cbiAgc2lnbjogc2lnbmVyLnNpZ25SZXF1ZXN0LFxuICBzaWduUmVxdWVzdDogc2lnbmVyLnNpZ25SZXF1ZXN0LFxuICBjcmVhdGVTaWduZXI6IHNpZ25lci5jcmVhdGVTaWduZXIsXG4gIGlzU2lnbmVyOiBzaWduZXIuaXNTaWduZXIsXG5cbiAgc3NoS2V5VG9QRU06IHV0aWxzLnNzaEtleVRvUEVNLFxuICBzc2hLZXlGaW5nZXJwcmludDogdXRpbHMuZmluZ2VycHJpbnQsXG4gIHBlbVRvUnNhU1NIS2V5OiB1dGlscy5wZW1Ub1JzYVNTSEtleSxcblxuICB2ZXJpZnk6IHZlcmlmeS52ZXJpZnlTaWduYXR1cmUsXG4gIHZlcmlmeVNpZ25hdHVyZTogdmVyaWZ5LnZlcmlmeVNpZ25hdHVyZSxcbiAgdmVyaWZ5SE1BQzogdmVyaWZ5LnZlcmlmeUhNQUNcbn07XG4iXSwibmFtZXMiOlsicGFyc2VyIiwicmVxdWlyZSIsInNpZ25lciIsInZlcmlmeSIsInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlIiwicGFyc2VSZXF1ZXN0Iiwic2lnbiIsInNpZ25SZXF1ZXN0IiwiY3JlYXRlU2lnbmVyIiwiaXNTaWduZXIiLCJzc2hLZXlUb1BFTSIsInNzaEtleUZpbmdlcnByaW50IiwiZmluZ2VycHJpbnQiLCJwZW1Ub1JzYVNTSEtleSIsInZlcmlmeVNpZ25hdHVyZSIsInZlcmlmeUhNQUMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-signature/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http-signature/lib/parser.js":
/*!***************************************************!*\
  !*** ./node_modules/http-signature/lib/parser.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2012 Joyent, Inc.  All rights reserved.\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/http-signature/lib/utils.js\");\n///--- Globals\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar validateAlgorithm = utils.validateAlgorithm;\nvar State = {\n    New: 0,\n    Params: 1\n};\nvar ParamsState = {\n    Name: 0,\n    Quote: 1,\n    Value: 2,\n    Comma: 3\n};\n///--- Specific Errors\nfunction ExpiredRequestError(message) {\n    HttpSignatureError.call(this, message, ExpiredRequestError);\n}\nutil.inherits(ExpiredRequestError, HttpSignatureError);\nfunction InvalidHeaderError(message) {\n    HttpSignatureError.call(this, message, InvalidHeaderError);\n}\nutil.inherits(InvalidHeaderError, HttpSignatureError);\nfunction InvalidParamsError(message) {\n    HttpSignatureError.call(this, message, InvalidParamsError);\n}\nutil.inherits(InvalidParamsError, HttpSignatureError);\nfunction MissingHeaderError(message) {\n    HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\nfunction StrictParsingError(message) {\n    HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n///--- Exported API\nmodule.exports = {\n    /**\n   * Parses the 'Authorization' header out of an http.ServerRequest object.\n   *\n   * Note that this API will fully validate the Authorization header, and throw\n   * on any error.  It will not however check the signature, or the keyId format\n   * as those are specific to your environment.  You can use the options object\n   * to pass in extra constraints.\n   *\n   * As a response object you can expect this:\n   *\n   *     {\n   *       \"scheme\": \"Signature\",\n   *       \"params\": {\n   *         \"keyId\": \"foo\",\n   *         \"algorithm\": \"rsa-sha256\",\n   *         \"headers\": [\n   *           \"date\" or \"x-date\",\n   *           \"digest\"\n   *         ],\n   *         \"signature\": \"base64\"\n   *       },\n   *       \"signingString\": \"ready to be passed to crypto.verify()\"\n   *     }\n   *\n   * @param {Object} request an http.ServerRequest.\n   * @param {Object} options an optional options object with:\n   *                   - clockSkew: allowed clock skew in seconds (default 300).\n   *                   - headers: required header names (def: date or x-date)\n   *                   - algorithms: algorithms to support (default: all).\n   *                   - strict: should enforce latest spec parsing\n   *                             (default: false).\n   * @return {Object} parsed out object (see above).\n   * @throws {TypeError} on invalid input.\n   * @throws {InvalidHeaderError} on an invalid Authorization header error.\n   * @throws {InvalidParamsError} if the params in the scheme are invalid.\n   * @throws {MissingHeaderError} if the params indicate a header not present,\n   *                              either in the request headers from the params,\n   *                              or not in the params from a required header\n   *                              in options.\n   * @throws {StrictParsingError} if old attributes are used in strict parsing\n   *                              mode.\n   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.\n   */ parseRequest: function parseRequest(request, options) {\n        assert.object(request, \"request\");\n        assert.object(request.headers, \"request.headers\");\n        if (options === undefined) {\n            options = {};\n        }\n        if (options.headers === undefined) {\n            options.headers = [\n                request.headers[\"x-date\"] ? \"x-date\" : \"date\"\n            ];\n        }\n        assert.object(options, \"options\");\n        assert.arrayOfString(options.headers, \"options.headers\");\n        assert.optionalFinite(options.clockSkew, \"options.clockSkew\");\n        var authzHeaderName = options.authorizationHeaderName || \"authorization\";\n        if (!request.headers[authzHeaderName]) {\n            throw new MissingHeaderError(\"no \" + authzHeaderName + \" header \" + \"present in the request\");\n        }\n        options.clockSkew = options.clockSkew || 300;\n        var i = 0;\n        var state = State.New;\n        var substate = ParamsState.Name;\n        var tmpName = \"\";\n        var tmpValue = \"\";\n        var parsed = {\n            scheme: \"\",\n            params: {},\n            signingString: \"\"\n        };\n        var authz = request.headers[authzHeaderName];\n        for(i = 0; i < authz.length; i++){\n            var c = authz.charAt(i);\n            switch(Number(state)){\n                case State.New:\n                    if (c !== \" \") parsed.scheme += c;\n                    else state = State.Params;\n                    break;\n                case State.Params:\n                    switch(Number(substate)){\n                        case ParamsState.Name:\n                            var code = c.charCodeAt(0);\n                            // restricted name of A-Z / a-z\n                            if (code >= 0x41 && code <= 0x5a || // A-Z\n                            code >= 0x61 && code <= 0x7a) {\n                                tmpName += c;\n                            } else if (c === \"=\") {\n                                if (tmpName.length === 0) throw new InvalidHeaderError(\"bad param format\");\n                                substate = ParamsState.Quote;\n                            } else {\n                                throw new InvalidHeaderError(\"bad param format\");\n                            }\n                            break;\n                        case ParamsState.Quote:\n                            if (c === '\"') {\n                                tmpValue = \"\";\n                                substate = ParamsState.Value;\n                            } else {\n                                throw new InvalidHeaderError(\"bad param format\");\n                            }\n                            break;\n                        case ParamsState.Value:\n                            if (c === '\"') {\n                                parsed.params[tmpName] = tmpValue;\n                                substate = ParamsState.Comma;\n                            } else {\n                                tmpValue += c;\n                            }\n                            break;\n                        case ParamsState.Comma:\n                            if (c === \",\") {\n                                tmpName = \"\";\n                                substate = ParamsState.Name;\n                            } else {\n                                throw new InvalidHeaderError(\"bad param format\");\n                            }\n                            break;\n                        default:\n                            throw new Error(\"Invalid substate\");\n                    }\n                    break;\n                default:\n                    throw new Error(\"Invalid substate\");\n            }\n        }\n        if (!parsed.params.headers || parsed.params.headers === \"\") {\n            if (request.headers[\"x-date\"]) {\n                parsed.params.headers = [\n                    \"x-date\"\n                ];\n            } else {\n                parsed.params.headers = [\n                    \"date\"\n                ];\n            }\n        } else {\n            parsed.params.headers = parsed.params.headers.split(\" \");\n        }\n        // Minimally validate the parsed object\n        if (!parsed.scheme || parsed.scheme !== \"Signature\") throw new InvalidHeaderError('scheme was not \"Signature\"');\n        if (!parsed.params.keyId) throw new InvalidHeaderError(\"keyId was not specified\");\n        if (!parsed.params.algorithm) throw new InvalidHeaderError(\"algorithm was not specified\");\n        if (!parsed.params.signature) throw new InvalidHeaderError(\"signature was not specified\");\n        // Check the algorithm against the official list\n        parsed.params.algorithm = parsed.params.algorithm.toLowerCase();\n        try {\n            validateAlgorithm(parsed.params.algorithm);\n        } catch (e) {\n            if (e instanceof InvalidAlgorithmError) throw new InvalidParamsError(parsed.params.algorithm + \" is not \" + \"supported\");\n            else throw e;\n        }\n        // Build the signingString\n        for(i = 0; i < parsed.params.headers.length; i++){\n            var h = parsed.params.headers[i].toLowerCase();\n            parsed.params.headers[i] = h;\n            if (h === \"request-line\") {\n                if (!options.strict) {\n                    /*\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */ parsed.signingString += request.method + \" \" + request.url + \" HTTP/\" + request.httpVersion;\n                } else {\n                    /* Strict parsing doesn't allow older draft headers. */ throw new StrictParsingError(\"request-line is not a valid header \" + \"with strict parsing enabled.\");\n                }\n            } else if (h === \"(request-target)\") {\n                parsed.signingString += \"(request-target): \" + request.method.toLowerCase() + \" \" + request.url;\n            } else {\n                var value = request.headers[h];\n                if (value === undefined) throw new MissingHeaderError(h + \" was not in the request\");\n                parsed.signingString += h + \": \" + value;\n            }\n            if (i + 1 < parsed.params.headers.length) parsed.signingString += \"\\n\";\n        }\n        // Check against the constraints\n        var date;\n        if (request.headers.date || request.headers[\"x-date\"]) {\n            if (request.headers[\"x-date\"]) {\n                date = new Date(request.headers[\"x-date\"]);\n            } else {\n                date = new Date(request.headers.date);\n            }\n            var now = new Date();\n            var skew = Math.abs(now.getTime() - date.getTime());\n            if (skew > options.clockSkew * 1000) {\n                throw new ExpiredRequestError(\"clock skew of \" + skew / 1000 + \"s was greater than \" + options.clockSkew + \"s\");\n            }\n        }\n        options.headers.forEach(function(hdr) {\n            // Remember that we already checked any headers in the params\n            // were in the request, so if this passes we're good.\n            if (parsed.params.headers.indexOf(hdr.toLowerCase()) < 0) throw new MissingHeaderError(hdr + \" was not a signed header\");\n        });\n        if (options.algorithms) {\n            if (options.algorithms.indexOf(parsed.params.algorithm) === -1) throw new InvalidParamsError(parsed.params.algorithm + \" is not a supported algorithm\");\n        }\n        parsed.algorithm = parsed.params.algorithm.toUpperCase();\n        parsed.keyId = parsed.params.keyId;\n        return parsed;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-signature/lib/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http-signature/lib/signer.js":
/*!***************************************************!*\
  !*** ./node_modules/http-signature/lib/signer.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2012 Joyent, Inc.  All rights reserved.\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar http = __webpack_require__(/*! http */ \"http\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar sshpk = __webpack_require__(/*! sshpk */ \"(ssr)/./node_modules/sshpk/lib/index.js\");\nvar jsprim = __webpack_require__(/*! jsprim */ \"(ssr)/./node_modules/jsprim/lib/jsprim.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/http-signature/lib/utils.js\");\nvar sprintf = (__webpack_require__(/*! util */ \"util\").format);\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n///--- Globals\nvar AUTHZ_FMT = 'Signature keyId=\"%s\",algorithm=\"%s\",headers=\"%s\",signature=\"%s\"';\n///--- Specific Errors\nfunction MissingHeaderError(message) {\n    HttpSignatureError.call(this, message, MissingHeaderError);\n}\nutil.inherits(MissingHeaderError, HttpSignatureError);\nfunction StrictParsingError(message) {\n    HttpSignatureError.call(this, message, StrictParsingError);\n}\nutil.inherits(StrictParsingError, HttpSignatureError);\n/* See createSigner() */ function RequestSigner(options) {\n    assert.object(options, \"options\");\n    var alg = [];\n    if (options.algorithm !== undefined) {\n        assert.string(options.algorithm, \"options.algorithm\");\n        alg = validateAlgorithm(options.algorithm);\n    }\n    this.rs_alg = alg;\n    /*\n   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones\n   * with an rs_signer.\n   *\n   * rs_signFunc-based RequestSigners have to build up their entire signing\n   * string within the rs_lines array and give it to rs_signFunc as a single\n   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to\n   * their signing state by using rs_signer.update(), thus only needing to\n   * buffer the hash function state and one line at a time.\n   */ if (options.sign !== undefined) {\n        assert.func(options.sign, \"options.sign\");\n        this.rs_signFunc = options.sign;\n    } else if (alg[0] === \"hmac\" && options.key !== undefined) {\n        assert.string(options.keyId, \"options.keyId\");\n        this.rs_keyId = options.keyId;\n        if (typeof options.key !== \"string\" && !Buffer.isBuffer(options.key)) throw new TypeError(\"options.key for HMAC must be a string or Buffer\");\n        /*\n     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their\n     * data in chunks rather than requiring it all to be given in one go\n     * at the end, so they are more similar to signers than signFuncs.\n     */ this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);\n        this.rs_signer.sign = function() {\n            var digest = this.digest(\"base64\");\n            return {\n                hashAlgorithm: alg[1],\n                toString: function() {\n                    return digest;\n                }\n            };\n        };\n    } else if (options.key !== undefined) {\n        var key = options.key;\n        if (typeof key === \"string\" || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(key);\n        assert.ok(sshpk.PrivateKey.isPrivateKey(key, [\n            1,\n            2\n        ]), \"options.key must be a sshpk.PrivateKey\");\n        this.rs_key = key;\n        assert.string(options.keyId, \"options.keyId\");\n        this.rs_keyId = options.keyId;\n        if (!PK_ALGOS[key.type]) {\n            throw new InvalidAlgorithmError(key.type.toUpperCase() + \" type \" + \"keys are not supported\");\n        }\n        if (alg[0] !== undefined && key.type !== alg[0]) {\n            throw new InvalidAlgorithmError(\"options.key must be a \" + alg[0].toUpperCase() + \" key, was given a \" + key.type.toUpperCase() + \" key instead\");\n        }\n        this.rs_signer = key.createSign(alg[1]);\n    } else {\n        throw new TypeError(\"options.sign (func) or options.key is required\");\n    }\n    this.rs_headers = [];\n    this.rs_lines = [];\n}\n/**\n * Adds a header to be signed, with its value, into this signer.\n *\n * @param {String} header\n * @param {String} value\n * @return {String} value written\n */ RequestSigner.prototype.writeHeader = function(header, value) {\n    assert.string(header, \"header\");\n    header = header.toLowerCase();\n    assert.string(value, \"value\");\n    this.rs_headers.push(header);\n    if (this.rs_signFunc) {\n        this.rs_lines.push(header + \": \" + value);\n    } else {\n        var line = header + \": \" + value;\n        if (this.rs_headers.length > 0) line = \"\\n\" + line;\n        this.rs_signer.update(line);\n    }\n    return value;\n};\n/**\n * Adds a default Date header, returning its value.\n *\n * @return {String}\n */ RequestSigner.prototype.writeDateHeader = function() {\n    return this.writeHeader(\"date\", jsprim.rfc1123(new Date()));\n};\n/**\n * Adds the request target line to be signed.\n *\n * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')\n * @param {String} path\n */ RequestSigner.prototype.writeTarget = function(method, path) {\n    assert.string(method, \"method\");\n    assert.string(path, \"path\");\n    method = method.toLowerCase();\n    this.writeHeader(\"(request-target)\", method + \" \" + path);\n};\n/**\n * Calculate the value for the Authorization header on this request\n * asynchronously.\n *\n * @param {Func} callback (err, authz)\n */ RequestSigner.prototype.sign = function(cb) {\n    assert.func(cb, \"callback\");\n    if (this.rs_headers.length < 1) throw new Error(\"At least one header must be signed\");\n    var alg, authz;\n    if (this.rs_signFunc) {\n        var data = this.rs_lines.join(\"\\n\");\n        var self = this;\n        this.rs_signFunc(data, function(err, sig) {\n            if (err) {\n                cb(err);\n                return;\n            }\n            try {\n                assert.object(sig, \"signature\");\n                assert.string(sig.keyId, \"signature.keyId\");\n                assert.string(sig.algorithm, \"signature.algorithm\");\n                assert.string(sig.signature, \"signature.signature\");\n                alg = validateAlgorithm(sig.algorithm);\n                authz = sprintf(AUTHZ_FMT, sig.keyId, sig.algorithm, self.rs_headers.join(\" \"), sig.signature);\n            } catch (e) {\n                cb(e);\n                return;\n            }\n            cb(null, authz);\n        });\n    } else {\n        try {\n            var sigObj = this.rs_signer.sign();\n        } catch (e) {\n            cb(e);\n            return;\n        }\n        alg = (this.rs_alg[0] || this.rs_key.type) + \"-\" + sigObj.hashAlgorithm;\n        var signature = sigObj.toString();\n        authz = sprintf(AUTHZ_FMT, this.rs_keyId, alg, this.rs_headers.join(\" \"), signature);\n        cb(null, authz);\n    }\n};\n///--- Exported API\nmodule.exports = {\n    /**\n   * Identifies whether a given object is a request signer or not.\n   *\n   * @param {Object} object, the object to identify\n   * @returns {Boolean}\n   */ isSigner: function(obj) {\n        if (typeof obj === \"object\" && obj instanceof RequestSigner) return true;\n        return false;\n    },\n    /**\n   * Creates a request signer, used to asynchronously build a signature\n   * for a request (does not have to be an http.ClientRequest).\n   *\n   * @param {Object} options, either:\n   *                   - {String} keyId\n   *                   - {String|Buffer} key\n   *                   - {String} algorithm (optional, required for HMAC)\n   *                 or:\n   *                   - {Func} sign (data, cb)\n   * @return {RequestSigner}\n   */ createSigner: function createSigner(options) {\n        return new RequestSigner(options);\n    },\n    /**\n   * Adds an 'Authorization' header to an http.ClientRequest object.\n   *\n   * Note that this API will add a Date header if it's not already set. Any\n   * other headers in the options.headers array MUST be present, or this\n   * will throw.\n   *\n   * You shouldn't need to check the return type; it's just there if you want\n   * to be pedantic.\n   *\n   * The optional flag indicates whether parsing should use strict enforcement\n   * of the version draft-cavage-http-signatures-04 of the spec or beyond.\n   * The default is to be loose and support\n   * older versions for compatibility.\n   *\n   * @param {Object} request an instance of http.ClientRequest.\n   * @param {Object} options signing parameters object:\n   *                   - {String} keyId required.\n   *                   - {String} key required (either a PEM or HMAC key).\n   *                   - {Array} headers optional; defaults to ['date'].\n   *                   - {String} algorithm optional (unless key is HMAC);\n   *                              default is the same as the sshpk default\n   *                              signing algorithm for the type of key given\n   *                   - {String} httpVersion optional; defaults to '1.1'.\n   *                   - {Boolean} strict optional; defaults to 'false'.\n   * @return {Boolean} true if Authorization (and optionally Date) were added.\n   * @throws {TypeError} on bad parameter types (input).\n   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with\n   *                                 the given key.\n   * @throws {sshpk.KeyParseError} if key was bad.\n   * @throws {MissingHeaderError} if a header to be signed was specified but\n   *                              was not present.\n   */ signRequest: function signRequest(request, options) {\n        assert.object(request, \"request\");\n        assert.object(options, \"options\");\n        assert.optionalString(options.algorithm, \"options.algorithm\");\n        assert.string(options.keyId, \"options.keyId\");\n        assert.optionalArrayOfString(options.headers, \"options.headers\");\n        assert.optionalString(options.httpVersion, \"options.httpVersion\");\n        if (!request.getHeader(\"Date\")) request.setHeader(\"Date\", jsprim.rfc1123(new Date()));\n        if (!options.headers) options.headers = [\n            \"date\"\n        ];\n        if (!options.httpVersion) options.httpVersion = \"1.1\";\n        var alg = [];\n        if (options.algorithm) {\n            options.algorithm = options.algorithm.toLowerCase();\n            alg = validateAlgorithm(options.algorithm);\n        }\n        var i;\n        var stringToSign = \"\";\n        for(i = 0; i < options.headers.length; i++){\n            if (typeof options.headers[i] !== \"string\") throw new TypeError(\"options.headers must be an array of Strings\");\n            var h = options.headers[i].toLowerCase();\n            if (h === \"request-line\") {\n                if (!options.strict) {\n                    /**\n           * We allow headers from the older spec drafts if strict parsing isn't\n           * specified in options.\n           */ stringToSign += request.method + \" \" + request.path + \" HTTP/\" + options.httpVersion;\n                } else {\n                    /* Strict parsing doesn't allow older draft headers. */ throw new StrictParsingError(\"request-line is not a valid header \" + \"with strict parsing enabled.\");\n                }\n            } else if (h === \"(request-target)\") {\n                stringToSign += \"(request-target): \" + request.method.toLowerCase() + \" \" + request.path;\n            } else {\n                var value = request.getHeader(h);\n                if (value === undefined || value === \"\") {\n                    throw new MissingHeaderError(h + \" was not in the request\");\n                }\n                stringToSign += h + \": \" + value;\n            }\n            if (i + 1 < options.headers.length) stringToSign += \"\\n\";\n        }\n        /* This is just for unit tests. */ if (request.hasOwnProperty(\"_stringToSign\")) {\n            request._stringToSign = stringToSign;\n        }\n        var signature;\n        if (alg[0] === \"hmac\") {\n            if (typeof options.key !== \"string\" && !Buffer.isBuffer(options.key)) throw new TypeError(\"options.key must be a string or Buffer\");\n            var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);\n            hmac.update(stringToSign);\n            signature = hmac.digest(\"base64\");\n        } else {\n            var key = options.key;\n            if (typeof key === \"string\" || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(options.key);\n            assert.ok(sshpk.PrivateKey.isPrivateKey(key, [\n                1,\n                2\n            ]), \"options.key must be a sshpk.PrivateKey\");\n            if (!PK_ALGOS[key.type]) {\n                throw new InvalidAlgorithmError(key.type.toUpperCase() + \" type \" + \"keys are not supported\");\n            }\n            if (alg[0] !== undefined && key.type !== alg[0]) {\n                throw new InvalidAlgorithmError(\"options.key must be a \" + alg[0].toUpperCase() + \" key, was given a \" + key.type.toUpperCase() + \" key instead\");\n            }\n            var signer = key.createSign(alg[1]);\n            signer.update(stringToSign);\n            var sigObj = signer.sign();\n            if (!HASH_ALGOS[sigObj.hashAlgorithm]) {\n                throw new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() + \" is not a supported hash algorithm\");\n            }\n            options.algorithm = key.type + \"-\" + sigObj.hashAlgorithm;\n            signature = sigObj.toString();\n            assert.notStrictEqual(signature, \"\", \"empty signature produced\");\n        }\n        var authzHeaderName = options.authorizationHeaderName || \"Authorization\";\n        request.setHeader(authzHeaderName, sprintf(AUTHZ_FMT, options.keyId, options.algorithm, options.headers.join(\" \"), signature));\n        return true;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-signature/lib/signer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http-signature/lib/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/http-signature/lib/utils.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2012 Joyent, Inc.  All rights reserved.\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar sshpk = __webpack_require__(/*! sshpk */ \"(ssr)/./node_modules/sshpk/lib/index.js\");\nvar util = __webpack_require__(/*! util */ \"util\");\nvar HASH_ALGOS = {\n    \"sha1\": true,\n    \"sha256\": true,\n    \"sha512\": true\n};\nvar PK_ALGOS = {\n    \"rsa\": true,\n    \"dsa\": true,\n    \"ecdsa\": true\n};\nfunction HttpSignatureError(message, caller) {\n    if (Error.captureStackTrace) Error.captureStackTrace(this, caller || HttpSignatureError);\n    this.message = message;\n    this.name = caller.name;\n}\nutil.inherits(HttpSignatureError, Error);\nfunction InvalidAlgorithmError(message) {\n    HttpSignatureError.call(this, message, InvalidAlgorithmError);\n}\nutil.inherits(InvalidAlgorithmError, HttpSignatureError);\nfunction validateAlgorithm(algorithm) {\n    var alg = algorithm.toLowerCase().split(\"-\");\n    if (alg.length !== 2) {\n        throw new InvalidAlgorithmError(alg[0].toUpperCase() + \" is not a \" + \"valid algorithm\");\n    }\n    if (alg[0] !== \"hmac\" && !PK_ALGOS[alg[0]]) {\n        throw new InvalidAlgorithmError(alg[0].toUpperCase() + \" type keys \" + \"are not supported\");\n    }\n    if (!HASH_ALGOS[alg[1]]) {\n        throw new InvalidAlgorithmError(alg[1].toUpperCase() + \" is not a \" + \"supported hash algorithm\");\n    }\n    return alg;\n}\n///--- API\nmodule.exports = {\n    HASH_ALGOS: HASH_ALGOS,\n    PK_ALGOS: PK_ALGOS,\n    HttpSignatureError: HttpSignatureError,\n    InvalidAlgorithmError: InvalidAlgorithmError,\n    validateAlgorithm: validateAlgorithm,\n    /**\n   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.\n   *\n   * The intent of this module is to interoperate with OpenSSL only,\n   * specifically the node crypto module's `verify` method.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} PEM encoded form of the RSA public key.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} on invalid ssh key formatted data.\n   */ sshKeyToPEM: function sshKeyToPEM(key) {\n        assert.string(key, \"ssh_key\");\n        var k = sshpk.parseKey(key, \"ssh\");\n        return k.toString(\"pem\");\n    },\n    /**\n   * Generates an OpenSSH fingerprint from an ssh public key.\n   *\n   * @param {String} key an OpenSSH public key.\n   * @return {String} key fingerprint.\n   * @throws {TypeError} on bad input.\n   * @throws {Error} if what you passed doesn't look like an ssh public key.\n   */ fingerprint: function fingerprint(key) {\n        assert.string(key, \"ssh_key\");\n        var k = sshpk.parseKey(key, \"ssh\");\n        return k.fingerprint(\"md5\").toString(\"hex\");\n    },\n    /**\n   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)\n   *\n   * The reverse of the above function.\n   */ pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {\n        assert.equal(\"string\", typeof pem, \"typeof pem\");\n        var k = sshpk.parseKey(pem, \"pem\");\n        k.comment = comment;\n        return k.toString(\"ssh\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBLG9EQUFvRDtBQUVwRCxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUNwQixJQUFJRSxPQUFPRixtQkFBT0EsQ0FBQztBQUVuQixJQUFJRyxhQUFhO0lBQ2YsUUFBUTtJQUNSLFVBQVU7SUFDVixVQUFVO0FBQ1o7QUFFQSxJQUFJQyxXQUFXO0lBQ2IsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0FBQ1g7QUFFQSxTQUFTQyxtQkFBbUJDLE9BQU8sRUFBRUMsTUFBTTtJQUN6QyxJQUFJQyxNQUFNQyxpQkFBaUIsRUFDekJELE1BQU1DLGlCQUFpQixDQUFDLElBQUksRUFBRUYsVUFBVUY7SUFFMUMsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO0lBQ2YsSUFBSSxDQUFDSSxJQUFJLEdBQUdILE9BQU9HLElBQUk7QUFDekI7QUFDQVIsS0FBS1MsUUFBUSxDQUFDTixvQkFBb0JHO0FBRWxDLFNBQVNJLHNCQUFzQk4sT0FBTztJQUNwQ0QsbUJBQW1CUSxJQUFJLENBQUMsSUFBSSxFQUFFUCxTQUFTTTtBQUN6QztBQUNBVixLQUFLUyxRQUFRLENBQUNDLHVCQUF1QlA7QUFFckMsU0FBU1Msa0JBQWtCQyxTQUFTO0lBQ2xDLElBQUlDLE1BQU1ELFVBQVVFLFdBQVcsR0FBR0MsS0FBSyxDQUFDO0lBRXhDLElBQUlGLElBQUlHLE1BQU0sS0FBSyxHQUFHO1FBQ3BCLE1BQU8sSUFBSVAsc0JBQXNCSSxHQUFHLENBQUMsRUFBRSxDQUFDSSxXQUFXLEtBQUssZUFDdEQ7SUFDSjtJQUVBLElBQUlKLEdBQUcsQ0FBQyxFQUFFLEtBQUssVUFBVSxDQUFDWixRQUFRLENBQUNZLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMxQyxNQUFPLElBQUlKLHNCQUFzQkksR0FBRyxDQUFDLEVBQUUsQ0FBQ0ksV0FBVyxLQUFLLGdCQUN0RDtJQUNKO0lBRUEsSUFBSSxDQUFDakIsVUFBVSxDQUFDYSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDdkIsTUFBTyxJQUFJSixzQkFBc0JJLEdBQUcsQ0FBQyxFQUFFLENBQUNJLFdBQVcsS0FBSyxlQUN0RDtJQUNKO0lBRUEsT0FBUUo7QUFDVjtBQUVBLFVBQVU7QUFFVkssT0FBT0MsT0FBTyxHQUFHO0lBRWZuQixZQUFZQTtJQUNaQyxVQUFVQTtJQUVWQyxvQkFBb0JBO0lBQ3BCTyx1QkFBdUJBO0lBRXZCRSxtQkFBbUJBO0lBRW5COzs7Ozs7Ozs7O0dBVUMsR0FDRFMsYUFBYSxTQUFTQSxZQUFZQyxHQUFHO1FBQ25DekIsT0FBTzBCLE1BQU0sQ0FBQ0QsS0FBSztRQUVuQixJQUFJRSxJQUFJekIsTUFBTTBCLFFBQVEsQ0FBQ0gsS0FBSztRQUM1QixPQUFRRSxFQUFFRSxRQUFRLENBQUM7SUFDckI7SUFHQTs7Ozs7OztHQU9DLEdBQ0RDLGFBQWEsU0FBU0EsWUFBWUwsR0FBRztRQUNuQ3pCLE9BQU8wQixNQUFNLENBQUNELEtBQUs7UUFFbkIsSUFBSUUsSUFBSXpCLE1BQU0wQixRQUFRLENBQUNILEtBQUs7UUFDNUIsT0FBUUUsRUFBRUcsV0FBVyxDQUFDLE9BQU9ELFFBQVEsQ0FBQztJQUN4QztJQUVBOzs7O0dBSUMsR0FDREUsZ0JBQWdCLFNBQVNBLGVBQWVDLEdBQUcsRUFBRUMsT0FBTztRQUNsRGpDLE9BQU9rQyxLQUFLLENBQUMsVUFBVSxPQUFRRixLQUFNO1FBRXJDLElBQUlMLElBQUl6QixNQUFNMEIsUUFBUSxDQUFDSSxLQUFLO1FBQzVCTCxFQUFFTSxPQUFPLEdBQUdBO1FBQ1osT0FBUU4sRUFBRUUsUUFBUSxDQUFDO0lBQ3JCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS1hcHAvLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL3V0aWxzLmpzP2I2YjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTIgSm95ZW50LCBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuXG52YXIgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTtcbnZhciBzc2hwayA9IHJlcXVpcmUoJ3NzaHBrJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIEhBU0hfQUxHT1MgPSB7XG4gICdzaGExJzogdHJ1ZSxcbiAgJ3NoYTI1Nic6IHRydWUsXG4gICdzaGE1MTInOiB0cnVlXG59O1xuXG52YXIgUEtfQUxHT1MgPSB7XG4gICdyc2EnOiB0cnVlLFxuICAnZHNhJzogdHJ1ZSxcbiAgJ2VjZHNhJzogdHJ1ZVxufTtcblxuZnVuY3Rpb24gSHR0cFNpZ25hdHVyZUVycm9yKG1lc3NhZ2UsIGNhbGxlcikge1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgY2FsbGVyIHx8IEh0dHBTaWduYXR1cmVFcnJvcik7XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gY2FsbGVyLm5hbWU7XG59XG51dGlsLmluaGVyaXRzKEh0dHBTaWduYXR1cmVFcnJvciwgRXJyb3IpO1xuXG5mdW5jdGlvbiBJbnZhbGlkQWxnb3JpdGhtRXJyb3IobWVzc2FnZSkge1xuICBIdHRwU2lnbmF0dXJlRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlLCBJbnZhbGlkQWxnb3JpdGhtRXJyb3IpO1xufVxudXRpbC5pbmhlcml0cyhJbnZhbGlkQWxnb3JpdGhtRXJyb3IsIEh0dHBTaWduYXR1cmVFcnJvcik7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQWxnb3JpdGhtKGFsZ29yaXRobSkge1xuICB2YXIgYWxnID0gYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCkuc3BsaXQoJy0nKTtcblxuICBpZiAoYWxnLmxlbmd0aCAhPT0gMikge1xuICAgIHRocm93IChuZXcgSW52YWxpZEFsZ29yaXRobUVycm9yKGFsZ1swXS50b1VwcGVyQ2FzZSgpICsgJyBpcyBub3QgYSAnICtcbiAgICAgICd2YWxpZCBhbGdvcml0aG0nKSk7XG4gIH1cblxuICBpZiAoYWxnWzBdICE9PSAnaG1hYycgJiYgIVBLX0FMR09TW2FsZ1swXV0pIHtcbiAgICB0aHJvdyAobmV3IEludmFsaWRBbGdvcml0aG1FcnJvcihhbGdbMF0udG9VcHBlckNhc2UoKSArICcgdHlwZSBrZXlzICcgK1xuICAgICAgJ2FyZSBub3Qgc3VwcG9ydGVkJykpO1xuICB9XG5cbiAgaWYgKCFIQVNIX0FMR09TW2FsZ1sxXV0pIHtcbiAgICB0aHJvdyAobmV3IEludmFsaWRBbGdvcml0aG1FcnJvcihhbGdbMV0udG9VcHBlckNhc2UoKSArICcgaXMgbm90IGEgJyArXG4gICAgICAnc3VwcG9ydGVkIGhhc2ggYWxnb3JpdGhtJykpO1xuICB9XG5cbiAgcmV0dXJuIChhbGcpO1xufVxuXG4vLy8tLS0gQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIEhBU0hfQUxHT1M6IEhBU0hfQUxHT1MsXG4gIFBLX0FMR09TOiBQS19BTEdPUyxcblxuICBIdHRwU2lnbmF0dXJlRXJyb3I6IEh0dHBTaWduYXR1cmVFcnJvcixcbiAgSW52YWxpZEFsZ29yaXRobUVycm9yOiBJbnZhbGlkQWxnb3JpdGhtRXJyb3IsXG5cbiAgdmFsaWRhdGVBbGdvcml0aG06IHZhbGlkYXRlQWxnb3JpdGhtLFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhbiBPcGVuU1NIIHB1YmxpYyBrZXkgKHJzYSBvbmx5KSB0byBhIFBLQ1MjOCBQRU0gZmlsZS5cbiAgICpcbiAgICogVGhlIGludGVudCBvZiB0aGlzIG1vZHVsZSBpcyB0byBpbnRlcm9wZXJhdGUgd2l0aCBPcGVuU1NMIG9ubHksXG4gICAqIHNwZWNpZmljYWxseSB0aGUgbm9kZSBjcnlwdG8gbW9kdWxlJ3MgYHZlcmlmeWAgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IGFuIE9wZW5TU0ggcHVibGljIGtleS5cbiAgICogQHJldHVybiB7U3RyaW5nfSBQRU0gZW5jb2RlZCBmb3JtIG9mIHRoZSBSU0EgcHVibGljIGtleS5cbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBvbiBiYWQgaW5wdXQuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBvbiBpbnZhbGlkIHNzaCBrZXkgZm9ybWF0dGVkIGRhdGEuXG4gICAqL1xuICBzc2hLZXlUb1BFTTogZnVuY3Rpb24gc3NoS2V5VG9QRU0oa2V5KSB7XG4gICAgYXNzZXJ0LnN0cmluZyhrZXksICdzc2hfa2V5Jyk7XG5cbiAgICB2YXIgayA9IHNzaHBrLnBhcnNlS2V5KGtleSwgJ3NzaCcpO1xuICAgIHJldHVybiAoay50b1N0cmluZygncGVtJykpO1xuICB9LFxuXG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhbiBPcGVuU1NIIGZpbmdlcnByaW50IGZyb20gYW4gc3NoIHB1YmxpYyBrZXkuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgYW4gT3BlblNTSCBwdWJsaWMga2V5LlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IGtleSBmaW5nZXJwcmludC5cbiAgICogQHRocm93cyB7VHlwZUVycm9yfSBvbiBiYWQgaW5wdXQuXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBpZiB3aGF0IHlvdSBwYXNzZWQgZG9lc24ndCBsb29rIGxpa2UgYW4gc3NoIHB1YmxpYyBrZXkuXG4gICAqL1xuICBmaW5nZXJwcmludDogZnVuY3Rpb24gZmluZ2VycHJpbnQoa2V5KSB7XG4gICAgYXNzZXJ0LnN0cmluZyhrZXksICdzc2hfa2V5Jyk7XG5cbiAgICB2YXIgayA9IHNzaHBrLnBhcnNlS2V5KGtleSwgJ3NzaCcpO1xuICAgIHJldHVybiAoay5maW5nZXJwcmludCgnbWQ1JykudG9TdHJpbmcoJ2hleCcpKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29udmVydHMgYSBQS0dDUyM4IFBFTSBmaWxlIHRvIGFuIE9wZW5TU0ggcHVibGljIGtleSAocnNhKVxuICAgKlxuICAgKiBUaGUgcmV2ZXJzZSBvZiB0aGUgYWJvdmUgZnVuY3Rpb24uXG4gICAqL1xuICBwZW1Ub1JzYVNTSEtleTogZnVuY3Rpb24gcGVtVG9Sc2FTU0hLZXkocGVtLCBjb21tZW50KSB7XG4gICAgYXNzZXJ0LmVxdWFsKCdzdHJpbmcnLCB0eXBlb2YgKHBlbSksICd0eXBlb2YgcGVtJyk7XG5cbiAgICB2YXIgayA9IHNzaHBrLnBhcnNlS2V5KHBlbSwgJ3BlbScpO1xuICAgIGsuY29tbWVudCA9IGNvbW1lbnQ7XG4gICAgcmV0dXJuIChrLnRvU3RyaW5nKCdzc2gnKSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsInNzaHBrIiwidXRpbCIsIkhBU0hfQUxHT1MiLCJQS19BTEdPUyIsIkh0dHBTaWduYXR1cmVFcnJvciIsIm1lc3NhZ2UiLCJjYWxsZXIiLCJFcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwibmFtZSIsImluaGVyaXRzIiwiSW52YWxpZEFsZ29yaXRobUVycm9yIiwiY2FsbCIsInZhbGlkYXRlQWxnb3JpdGhtIiwiYWxnb3JpdGhtIiwiYWxnIiwidG9Mb3dlckNhc2UiLCJzcGxpdCIsImxlbmd0aCIsInRvVXBwZXJDYXNlIiwibW9kdWxlIiwiZXhwb3J0cyIsInNzaEtleVRvUEVNIiwia2V5Iiwic3RyaW5nIiwiayIsInBhcnNlS2V5IiwidG9TdHJpbmciLCJmaW5nZXJwcmludCIsInBlbVRvUnNhU1NIS2V5IiwicGVtIiwiY29tbWVudCIsImVxdWFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-signature/lib/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/http-signature/lib/verify.js":
/*!***************************************************!*\
  !*** ./node_modules/http-signature/lib/verify.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2015 Joyent, Inc.\nvar assert = __webpack_require__(/*! assert-plus */ \"(ssr)/./node_modules/assert-plus/assert.js\");\nvar crypto = __webpack_require__(/*! crypto */ \"crypto\");\nvar sshpk = __webpack_require__(/*! sshpk */ \"(ssr)/./node_modules/sshpk/lib/index.js\");\nvar utils = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/http-signature/lib/utils.js\");\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm;\n///--- Exported API\nmodule.exports = {\n    /**\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\n   * an object that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} pubkey RSA/DSA private key PEM.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */ verifySignature: function verifySignature(parsedSignature, pubkey) {\n        assert.object(parsedSignature, \"parsedSignature\");\n        if (typeof pubkey === \"string\" || Buffer.isBuffer(pubkey)) pubkey = sshpk.parseKey(pubkey);\n        assert.ok(sshpk.Key.isKey(pubkey, [\n            1,\n            1\n        ]), \"pubkey must be a sshpk.Key\");\n        var alg = validateAlgorithm(parsedSignature.algorithm);\n        if (alg[0] === \"hmac\" || alg[0] !== pubkey.type) return false;\n        var v = pubkey.createVerify(alg[1]);\n        v.update(parsedSignature.signingString);\n        return v.verify(parsedSignature.params.signature, \"base64\");\n    },\n    /**\n   * Verify HMAC against shared secret.  You are expected to pass in an object\n   * that was returned from `parse()`.\n   *\n   * @param {Object} parsedSignature the object you got from `parse`.\n   * @param {String} secret HMAC shared secret.\n   * @return {Boolean} true if valid, false otherwise.\n   * @throws {TypeError} if you pass in bad arguments.\n   * @throws {InvalidAlgorithmError}\n   */ verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n        assert.object(parsedSignature, \"parsedHMAC\");\n        assert.string(secret, \"secret\");\n        var alg = validateAlgorithm(parsedSignature.algorithm);\n        if (alg[0] !== \"hmac\") return false;\n        var hashAlg = alg[1].toUpperCase();\n        var hmac = crypto.createHmac(hashAlg, secret);\n        hmac.update(parsedSignature.signingString);\n        /*\n     * Now double-hash to avoid leaking timing information - there's\n     * no easy constant-time compare in JS, so we use this approach\n     * instead. See for more info:\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\n     * verification.aspx\n     */ var h1 = crypto.createHmac(hashAlg, secret);\n        h1.update(hmac.digest());\n        h1 = h1.digest();\n        var h2 = crypto.createHmac(hashAlg, secret);\n        h2.update(new Buffer(parsedSignature.params.signature, \"base64\"));\n        h2 = h2.digest();\n        /* Node 0.8 returns strings from .digest(). */ if (typeof h1 === \"string\") return h1 === h2;\n        /* And node 0.10 lacks the .equals() method on Buffers. */ if (Buffer.isBuffer(h1) && !h1.equals) return h1.toString(\"binary\") === h2.toString(\"binary\");\n        return h1.equals(h2);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHR0cC1zaWduYXR1cmUvbGliL3ZlcmlmeS5qcyIsIm1hcHBpbmdzIjoiQUFBQSw4QkFBOEI7QUFFOUIsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsUUFBUUYsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUcsUUFBUUgsbUJBQU9BLENBQUM7QUFFcEIsSUFBSUksYUFBYUQsTUFBTUMsVUFBVTtBQUNqQyxJQUFJQyxXQUFXRixNQUFNRSxRQUFRO0FBQzdCLElBQUlDLHdCQUF3QkgsTUFBTUcscUJBQXFCO0FBQ3ZELElBQUlDLHFCQUFxQkosTUFBTUksa0JBQWtCO0FBQ2pELElBQUlDLG9CQUFvQkwsTUFBTUssaUJBQWlCO0FBRS9DLG1CQUFtQjtBQUVuQkMsT0FBT0MsT0FBTyxHQUFHO0lBQ2Y7Ozs7Ozs7OztHQVNDLEdBQ0RDLGlCQUFpQixTQUFTQSxnQkFBZ0JDLGVBQWUsRUFBRUMsTUFBTTtRQUMvRGQsT0FBT2UsTUFBTSxDQUFDRixpQkFBaUI7UUFDL0IsSUFBSSxPQUFRQyxXQUFZLFlBQVlFLE9BQU9DLFFBQVEsQ0FBQ0gsU0FDbERBLFNBQVNYLE1BQU1lLFFBQVEsQ0FBQ0o7UUFDMUJkLE9BQU9tQixFQUFFLENBQUNoQixNQUFNaUIsR0FBRyxDQUFDQyxLQUFLLENBQUNQLFFBQVE7WUFBQztZQUFHO1NBQUUsR0FBRztRQUUzQyxJQUFJUSxNQUFNYixrQkFBa0JJLGdCQUFnQlUsU0FBUztRQUNyRCxJQUFJRCxHQUFHLENBQUMsRUFBRSxLQUFLLFVBQVVBLEdBQUcsQ0FBQyxFQUFFLEtBQUtSLE9BQU9VLElBQUksRUFDN0MsT0FBUTtRQUVWLElBQUlDLElBQUlYLE9BQU9ZLFlBQVksQ0FBQ0osR0FBRyxDQUFDLEVBQUU7UUFDbENHLEVBQUVFLE1BQU0sQ0FBQ2QsZ0JBQWdCZSxhQUFhO1FBQ3RDLE9BQVFILEVBQUVJLE1BQU0sQ0FBQ2hCLGdCQUFnQmlCLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFO0lBQ3JEO0lBRUE7Ozs7Ozs7OztHQVNDLEdBQ0RDLFlBQVksU0FBU0EsV0FBV25CLGVBQWUsRUFBRW9CLE1BQU07UUFDckRqQyxPQUFPZSxNQUFNLENBQUNGLGlCQUFpQjtRQUMvQmIsT0FBT2tDLE1BQU0sQ0FBQ0QsUUFBUTtRQUV0QixJQUFJWCxNQUFNYixrQkFBa0JJLGdCQUFnQlUsU0FBUztRQUNyRCxJQUFJRCxHQUFHLENBQUMsRUFBRSxLQUFLLFFBQ2IsT0FBUTtRQUVWLElBQUlhLFVBQVViLEdBQUcsQ0FBQyxFQUFFLENBQUNjLFdBQVc7UUFFaEMsSUFBSUMsT0FBT25DLE9BQU9vQyxVQUFVLENBQUNILFNBQVNGO1FBQ3RDSSxLQUFLVixNQUFNLENBQUNkLGdCQUFnQmUsYUFBYTtRQUV6Qzs7Ozs7O0tBTUMsR0FDRCxJQUFJVyxLQUFLckMsT0FBT29DLFVBQVUsQ0FBQ0gsU0FBU0Y7UUFDcENNLEdBQUdaLE1BQU0sQ0FBQ1UsS0FBS0csTUFBTTtRQUNyQkQsS0FBS0EsR0FBR0MsTUFBTTtRQUNkLElBQUlDLEtBQUt2QyxPQUFPb0MsVUFBVSxDQUFDSCxTQUFTRjtRQUNwQ1EsR0FBR2QsTUFBTSxDQUFDLElBQUlYLE9BQU9ILGdCQUFnQmlCLE1BQU0sQ0FBQ0MsU0FBUyxFQUFFO1FBQ3ZEVSxLQUFLQSxHQUFHRCxNQUFNO1FBRWQsNENBQTRDLEdBQzVDLElBQUksT0FBUUQsT0FBUSxVQUNsQixPQUFRQSxPQUFPRTtRQUNqQix3REFBd0QsR0FDeEQsSUFBSXpCLE9BQU9DLFFBQVEsQ0FBQ3NCLE9BQU8sQ0FBQ0EsR0FBR0csTUFBTSxFQUNuQyxPQUFRSCxHQUFHSSxRQUFRLENBQUMsY0FBY0YsR0FBR0UsUUFBUSxDQUFDO1FBRWhELE9BQVFKLEdBQUdHLE1BQU0sQ0FBQ0Q7SUFDcEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LWFwcC8uL25vZGVfbW9kdWxlcy9odHRwLXNpZ25hdHVyZS9saWIvdmVyaWZ5LmpzP2M3ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUgSm95ZW50LCBJbmMuXG5cbnZhciBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQtcGx1cycpO1xudmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xudmFyIHNzaHBrID0gcmVxdWlyZSgnc3NocGsnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIEhBU0hfQUxHT1MgPSB1dGlscy5IQVNIX0FMR09TO1xudmFyIFBLX0FMR09TID0gdXRpbHMuUEtfQUxHT1M7XG52YXIgSW52YWxpZEFsZ29yaXRobUVycm9yID0gdXRpbHMuSW52YWxpZEFsZ29yaXRobUVycm9yO1xudmFyIEh0dHBTaWduYXR1cmVFcnJvciA9IHV0aWxzLkh0dHBTaWduYXR1cmVFcnJvcjtcbnZhciB2YWxpZGF0ZUFsZ29yaXRobSA9IHV0aWxzLnZhbGlkYXRlQWxnb3JpdGhtO1xuXG4vLy8tLS0gRXhwb3J0ZWQgQVBJXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvKipcbiAgICogVmVyaWZ5IFJTQS9EU0Egc2lnbmF0dXJlIGFnYWluc3QgcHVibGljIGtleS4gIFlvdSBhcmUgZXhwZWN0ZWQgdG8gcGFzcyBpblxuICAgKiBhbiBvYmplY3QgdGhhdCB3YXMgcmV0dXJuZWQgZnJvbSBgcGFyc2UoKWAuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJzZWRTaWduYXR1cmUgdGhlIG9iamVjdCB5b3UgZ290IGZyb20gYHBhcnNlYC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHB1YmtleSBSU0EvRFNBIHByaXZhdGUga2V5IFBFTS5cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIHlvdSBwYXNzIGluIGJhZCBhcmd1bWVudHMuXG4gICAqIEB0aHJvd3Mge0ludmFsaWRBbGdvcml0aG1FcnJvcn1cbiAgICovXG4gIHZlcmlmeVNpZ25hdHVyZTogZnVuY3Rpb24gdmVyaWZ5U2lnbmF0dXJlKHBhcnNlZFNpZ25hdHVyZSwgcHVia2V5KSB7XG4gICAgYXNzZXJ0Lm9iamVjdChwYXJzZWRTaWduYXR1cmUsICdwYXJzZWRTaWduYXR1cmUnKTtcbiAgICBpZiAodHlwZW9mIChwdWJrZXkpID09PSAnc3RyaW5nJyB8fCBCdWZmZXIuaXNCdWZmZXIocHVia2V5KSlcbiAgICAgIHB1YmtleSA9IHNzaHBrLnBhcnNlS2V5KHB1YmtleSk7XG4gICAgYXNzZXJ0Lm9rKHNzaHBrLktleS5pc0tleShwdWJrZXksIFsxLCAxXSksICdwdWJrZXkgbXVzdCBiZSBhIHNzaHBrLktleScpO1xuXG4gICAgdmFyIGFsZyA9IHZhbGlkYXRlQWxnb3JpdGhtKHBhcnNlZFNpZ25hdHVyZS5hbGdvcml0aG0pO1xuICAgIGlmIChhbGdbMF0gPT09ICdobWFjJyB8fCBhbGdbMF0gIT09IHB1YmtleS50eXBlKVxuICAgICAgcmV0dXJuIChmYWxzZSk7XG5cbiAgICB2YXIgdiA9IHB1YmtleS5jcmVhdGVWZXJpZnkoYWxnWzFdKTtcbiAgICB2LnVwZGF0ZShwYXJzZWRTaWduYXR1cmUuc2lnbmluZ1N0cmluZyk7XG4gICAgcmV0dXJuICh2LnZlcmlmeShwYXJzZWRTaWduYXR1cmUucGFyYW1zLnNpZ25hdHVyZSwgJ2Jhc2U2NCcpKTtcbiAgfSxcblxuICAvKipcbiAgICogVmVyaWZ5IEhNQUMgYWdhaW5zdCBzaGFyZWQgc2VjcmV0LiAgWW91IGFyZSBleHBlY3RlZCB0byBwYXNzIGluIGFuIG9iamVjdFxuICAgKiB0aGF0IHdhcyByZXR1cm5lZCBmcm9tIGBwYXJzZSgpYC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcnNlZFNpZ25hdHVyZSB0aGUgb2JqZWN0IHlvdSBnb3QgZnJvbSBgcGFyc2VgLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gc2VjcmV0IEhNQUMgc2hhcmVkIHNlY3JldC5cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gdHJ1ZSBpZiB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAdGhyb3dzIHtUeXBlRXJyb3J9IGlmIHlvdSBwYXNzIGluIGJhZCBhcmd1bWVudHMuXG4gICAqIEB0aHJvd3Mge0ludmFsaWRBbGdvcml0aG1FcnJvcn1cbiAgICovXG4gIHZlcmlmeUhNQUM6IGZ1bmN0aW9uIHZlcmlmeUhNQUMocGFyc2VkU2lnbmF0dXJlLCBzZWNyZXQpIHtcbiAgICBhc3NlcnQub2JqZWN0KHBhcnNlZFNpZ25hdHVyZSwgJ3BhcnNlZEhNQUMnKTtcbiAgICBhc3NlcnQuc3RyaW5nKHNlY3JldCwgJ3NlY3JldCcpO1xuXG4gICAgdmFyIGFsZyA9IHZhbGlkYXRlQWxnb3JpdGhtKHBhcnNlZFNpZ25hdHVyZS5hbGdvcml0aG0pO1xuICAgIGlmIChhbGdbMF0gIT09ICdobWFjJylcbiAgICAgIHJldHVybiAoZmFsc2UpO1xuXG4gICAgdmFyIGhhc2hBbGcgPSBhbGdbMV0udG9VcHBlckNhc2UoKTtcblxuICAgIHZhciBobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoaGFzaEFsZywgc2VjcmV0KTtcbiAgICBobWFjLnVwZGF0ZShwYXJzZWRTaWduYXR1cmUuc2lnbmluZ1N0cmluZyk7XG5cbiAgICAvKlxuICAgICAqIE5vdyBkb3VibGUtaGFzaCB0byBhdm9pZCBsZWFraW5nIHRpbWluZyBpbmZvcm1hdGlvbiAtIHRoZXJlJ3NcbiAgICAgKiBubyBlYXN5IGNvbnN0YW50LXRpbWUgY29tcGFyZSBpbiBKUywgc28gd2UgdXNlIHRoaXMgYXBwcm9hY2hcbiAgICAgKiBpbnN0ZWFkLiBTZWUgZm9yIG1vcmUgaW5mbzpcbiAgICAgKiBodHRwczovL3d3dy5pc2VjcGFydG5lcnMuY29tL2Jsb2cvMjAxMS9mZWJydWFyeS9kb3VibGUtaG1hYy1cbiAgICAgKiB2ZXJpZmljYXRpb24uYXNweFxuICAgICAqL1xuICAgIHZhciBoMSA9IGNyeXB0by5jcmVhdGVIbWFjKGhhc2hBbGcsIHNlY3JldCk7XG4gICAgaDEudXBkYXRlKGhtYWMuZGlnZXN0KCkpO1xuICAgIGgxID0gaDEuZGlnZXN0KCk7XG4gICAgdmFyIGgyID0gY3J5cHRvLmNyZWF0ZUhtYWMoaGFzaEFsZywgc2VjcmV0KTtcbiAgICBoMi51cGRhdGUobmV3IEJ1ZmZlcihwYXJzZWRTaWduYXR1cmUucGFyYW1zLnNpZ25hdHVyZSwgJ2Jhc2U2NCcpKTtcbiAgICBoMiA9IGgyLmRpZ2VzdCgpO1xuXG4gICAgLyogTm9kZSAwLjggcmV0dXJucyBzdHJpbmdzIGZyb20gLmRpZ2VzdCgpLiAqL1xuICAgIGlmICh0eXBlb2YgKGgxKSA9PT0gJ3N0cmluZycpXG4gICAgICByZXR1cm4gKGgxID09PSBoMik7XG4gICAgLyogQW5kIG5vZGUgMC4xMCBsYWNrcyB0aGUgLmVxdWFscygpIG1ldGhvZCBvbiBCdWZmZXJzLiAqL1xuICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoaDEpICYmICFoMS5lcXVhbHMpXG4gICAgICByZXR1cm4gKGgxLnRvU3RyaW5nKCdiaW5hcnknKSA9PT0gaDIudG9TdHJpbmcoJ2JpbmFyeScpKTtcblxuICAgIHJldHVybiAoaDEuZXF1YWxzKGgyKSk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsImNyeXB0byIsInNzaHBrIiwidXRpbHMiLCJIQVNIX0FMR09TIiwiUEtfQUxHT1MiLCJJbnZhbGlkQWxnb3JpdGhtRXJyb3IiLCJIdHRwU2lnbmF0dXJlRXJyb3IiLCJ2YWxpZGF0ZUFsZ29yaXRobSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ2ZXJpZnlTaWduYXR1cmUiLCJwYXJzZWRTaWduYXR1cmUiLCJwdWJrZXkiLCJvYmplY3QiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInBhcnNlS2V5Iiwib2siLCJLZXkiLCJpc0tleSIsImFsZyIsImFsZ29yaXRobSIsInR5cGUiLCJ2IiwiY3JlYXRlVmVyaWZ5IiwidXBkYXRlIiwic2lnbmluZ1N0cmluZyIsInZlcmlmeSIsInBhcmFtcyIsInNpZ25hdHVyZSIsInZlcmlmeUhNQUMiLCJzZWNyZXQiLCJzdHJpbmciLCJoYXNoQWxnIiwidG9VcHBlckNhc2UiLCJobWFjIiwiY3JlYXRlSG1hYyIsImgxIiwiZGlnZXN0IiwiaDIiLCJlcXVhbHMiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/http-signature/lib/verify.js\n");

/***/ })

};
;